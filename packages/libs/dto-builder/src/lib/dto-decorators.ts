import 'reflect-metadata';

function key(name: string) {
  return `dto:annotation:properties:${name}`;
}

/**
 * Declares a class property to be a DTO property, which makes
 * it available for autogenerated builder classes.
 *
 * @returns a PropertyDecorator wrapping the class property.
 */
export function Property(target: unknown, propertyKey: string | symbol) {
  const { constructor } = target;
  const { name } = constructor;
  const variables: Set<unknown> =
    Reflect.getOwnMetadata(key(name), target.constructor) ?? new Set();
  variables.add(propertyKey);
  Reflect.defineMetadata(key(name), variables, target.constructor);
}

/**
 * Retrieves a Set of property names which exist
 * on a DTO and which have been declared with the `@Property` decorator.
 *
 * @param target The DTO instance to check against
 * @returns A list of property names from the DTO object.
 */
export function getDtoPropertyDecorators(target: unknown): string[] {
  // get info about keys that used in current property
  return Reflect.getOwnMetadata(
    key(target.constructor.name),
    target.constructor
  );
}
