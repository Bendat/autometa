"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[5676],{4993:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(2983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6721:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(2983),a=n(4517);const i={tabItem:"tabItem_aDNL"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,l),hidden:n},t)}},9944:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(3050),a=n(2983),i=n(4517),l=n(2454),o=n(3729),s=n(4177),u=n(5932),p=n(9115);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function c(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=c(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:n,groupId:r}),[m,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=s??m;return d({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),k(e)}),[u,k,i]),tabValues:i}}var b=n(301);const h={tabList:"tabList_PMyH",tabItem:"tabItem_WJqR"};function y(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==o&&(m(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:c},l,{className:(0,i.Z)("tabs__item",h.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=k(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",h.tabList)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(g,(0,r.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return a.createElement(v,(0,r.Z)({key:String(t)},e))}},8082:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var r=n(3050),a=(n(2983),n(4993)),i=n(9944),l=n(6721);const o={sidebar_position:4},s="Cucumber Expressions",u={unversionedId:"cucumber/test_runner/cucumber_expressions",id:"cucumber/test_runner/cucumber_expressions",title:"Cucumber Expressions",description:"Cucumber Expressions are a templating format to create dynamic",source:"@site/docs/cucumber/test_runner/cucumber_expressions.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/cucumber_expressions",permalink:"/autometa/docs/cucumber/test_runner/cucumber_expressions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/cucumber_expressions.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"cucumberRunnerBar",previous:{title:"Step Arguments",permalink:"/autometa/docs/cucumber/test_runner/step-arguments"},next:{title:"Dependency Injection",permalink:"/autometa/docs/cucumber/test_runner/dependency_injection"}},p={},m=[{value:"Defining Custom Types",id:"defining-custom-types",level:2},{value:"Example",id:"example",level:3},{value:"With transform",id:"with-transform",level:4},{value:"With primitive",id:"with-primitive",level:4},{value:"With type",id:"with-type",level:4},{value:"Declaring Custom Types",id:"declaring-custom-types",level:4}],c={toc:m},d="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cucumber-expressions"},"Cucumber Expressions"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cucumber/cucumber-expressions"},"Cucumber Expressions")," are a templating format to create dynamic\nstep definitions, without the burden of Regular Expressions."),(0,a.kt)("p",null,"A Cucumber Expression is essentially a string which matches a step\ndefined in a gherkin ",(0,a.kt)("inlineCode",{parentName:"p"},".feature")," file."),(0,a.kt)("p",null,"They could match literally:"),(0,a.kt)(i.Z,{groupId:"gherkin-expression",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"gherkin",label:"Gherkin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},"Given I have navigated to my profile\n\n"))),(0,a.kt)(l.Z,{value:"expression",label:"Expression",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("I have navigated to my profile", () => {\n  // ...\n});\n')))),(0,a.kt)("p",null,"Or they could match against an expression variable:"),(0,a.kt)(i.Z,{groupId:"gherkin-expression",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"gherkin",label:"Gherkin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},"Given I have 4 dogs\n"))),(0,a.kt)(l.Z,{value:"expression",label:"Expression",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("I have {int} dogs", (dogCount) => {\n  // ...\n});\n')))),(0,a.kt)("p",null,"When a step definition contains an expression variable (or several),\nthe corresponding value is extracted from the Gherkin step, and\npassed as an argument to the step definition function."),(0,a.kt)("p",null,"In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"dogCount")," will be ",(0,a.kt)("inlineCode",{parentName:"p"},"4"),". For the following standard expression\nformats, the type of the variable will be inferred and an explicit type annotdation (",(0,a.kt)("inlineCode",{parentName:"p"},"dogCount: number"),") is not required:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{int}")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{float}")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{string}")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{word}"))),(0,a.kt)("p",null,"Additionally, the following custom types are supported out of the box:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{number}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"accepts integer or float numbers"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{boolean}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"accepts ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),". Does not require quotes around the value"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{bool}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"alias for ",(0,a.kt)("inlineCode",{parentName:"li"},"{boolean}")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{date}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Converts a literate date string, or human readable date string like ",(0,a.kt)("inlineCode",{parentName:"li"},"'1 hour from now'"),"\nor ",(0,a.kt)("inlineCode",{parentName:"li"},"'tomorrow'")," to a ",(0,a.kt)("inlineCode",{parentName:"li"},"Date")," object with that value"),(0,a.kt)("li",{parentName:"ul"},"Requires the value to be wrapped in quotes"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{any}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"wildcard"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{unknown}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"type enforced wildcard"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{primitive}"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Attempts to convert the value to a primitive type"),(0,a.kt)("li",{parentName:"ul"},"string, number, boolean, or date")))),(0,a.kt)("h2",{id:"defining-custom-types"},"Defining Custom Types"),(0,a.kt)("p",null,"Custom types can be defined with the ",(0,a.kt)("inlineCode",{parentName:"p"},"defineParameterType")," function. This function\naccepts a collection of ParameterType objects with the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: string;\n  regexpPattern: RegExp;\n  transformer?: (arg: string) => any;\n  useForSnippets?: boolean;\n  preferForRegexpMatch?: boolean;\n  pattern?: string;\n  typeName?: string;\n}\n")),(0,a.kt)("p",null,"Which represent the following details:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," - the name of the type. This is used to reference the type in the expression"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"regexp")," - a regular expression to match against the value in the expression"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"primitive")," - the primitive value the result represents, if any. I.e for a primitive ",(0,a.kt)("inlineCode",{parentName:"li"},"Number")," and a string ",(0,a.kt)("inlineCode",{parentName:"li"},"'1'"),", the result would be the parsed number ",(0,a.kt)("inlineCode",{parentName:"li"},"1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type")," - the type Constructor the result represents, if any. I.e for a type ",(0,a.kt)("inlineCode",{parentName:"li"},"Date")," and a string ",(0,a.kt)("inlineCode",{parentName:"li"},"'1 hour from now'"),", the result would be a ",(0,a.kt)("inlineCode",{parentName:"li"},"Date")," object with the value of 1 hour from now",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts any class constructor as long as it accepts a single string or primitive (see below) argument"),(0,a.kt)("li",{parentName:"ul"},"If a ",(0,a.kt)("inlineCode",{parentName:"li"},"primitive")," is also defined, the value will first ",(0,a.kt)("strong",{parentName:"li"},"be converted to the specified primitive type")," before being passed to the constructor"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"transform")," - a function to transform the value from the expression to the desired type",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If a ",(0,a.kt)("inlineCode",{parentName:"li"},"primitive")," is also defined, the value will first ",(0,a.kt)("strong",{parentName:"li"},"be converted to the specified primitive type")," before being passed to the transformer"),(0,a.kt)("li",{parentName:"ul"},"If a ",(0,a.kt)("inlineCode",{parentName:"li"},"type")," is also defined, the value will first ",(0,a.kt)("strong",{parentName:"li"},"be converted to the specified type")," before being passed to the transformer"),(0,a.kt)("li",{parentName:"ul"},"If both a ",(0,a.kt)("inlineCode",{parentName:"li"},"primitive")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"type")," are defined, the value will first be converted to the specified primitive type, then passed to the constructor and finally the constructed object will be passed to the transformer")))),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("h4",{id:"with-transform"},"With transform"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { defineParameterType } from "@autometa/runner";\nimport { getUserByUsername } from "./user-service";\n\ndefineParameterType({\n  name: "user",\n  regexpPattern: /@([a-zA-Z]+)/,\n  transformer: (username) => {\n    return getUserByUsername(username);\n  }\n});\n')),(0,a.kt)("h4",{id:"with-primitive"},"With primitive"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { defineParameterType } from "@autometa/runner";\n\ndefineParameterType({\n  name: "int",\n  regexpPattern: /[+-]?\\d+/,\n  primitive: Number\n});\n')),(0,a.kt)("h4",{id:"with-type"},"With type"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"parameters",label:"Defining Parameters",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { defineParameterType } from "@autometa/runner";\nimport { MyDto } from "./dtos";\n\ndefineParameterType({\n  name: "myDto",\n  regexpPattern: /@([a-zA-Z]+)/,\n  type: MyDto\n});\n'))),(0,a.kt)(l.Z,{value:"dto",label:"dtos.ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// dtos.ts\nexport class MyDto {\n  constructor(public name: string) {}\n  age: number;\n}\n")))),(0,a.kt)("h4",{id:"declaring-custom-types"},"Declaring Custom Types"),(0,a.kt)("p",null,"By default, any custom types you define cannot be inferred in step definitions and will be typed\nas ",(0,a.kt)("inlineCode",{parentName:"p"},"unknown"),", which must be handled inside the step."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Given("I have a {myDto}", (myDto) => {\n  myDtoFunction(myDto); // Error, expected MyDto but was unknown\n  // myDto is typed as unknown\n  const casted = myDto as MyDto;\n  myDtoFunction(casted)\n}\n')),(0,a.kt)("p",null,"However it is possible to override the ",(0,a.kt)("inlineCode",{parentName:"p"},"@autometa/scopes")," module in a declaration file with your own\ncustom types, which will be used to infer the type of the step definition."),(0,a.kt)("p",null,"For example, if you have a custom type ",(0,a.kt)("inlineCode",{parentName:"p"},"MyDto")," defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"dtos.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// typings/app.d.ts\nimport type { MyDto } from "./dtos";\n\ndeclare module "@autometa/scopes" {\n  export interface CustomTypes {\n    myDto: MyDto;\n  }\n}\n')),(0,a.kt)("p",null,"Next, tell TypeScript about your custom types by adding the following to your ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "types": ["typings/app.d.ts"]\n  }\n}\n')),(0,a.kt)("p",null,"Then in your step definition, the type of the ",(0,a.kt)("inlineCode",{parentName:"p"},"myDto")," parameter will be inferred as ",(0,a.kt)("inlineCode",{parentName:"p"},"MyDto"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("I have a {myDto}", (myDto) => {\n  // myDto is inferred as MyDto\n});\n')))}f.isMDXComponent=!0}}]);