"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[5649],{4993:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(2983);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),f=o,d=c["".concat(l,".").concat(f)]||c[f]||m[f]||a;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4876:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(3050),o=(r(2983),r(4993));const a={sidebar_position:7},i="Hooks",s={unversionedId:"cucumber/test_runner/hooks",id:"cucumber/test_runner/hooks",title:"Hooks",description:"The following hooks are supported:",source:"@site/docs/cucumber/test_runner/hooks.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/hooks",permalink:"/autometa/docs/cucumber/test_runner/hooks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/hooks.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"cucumberRunnerBar",previous:{title:"Date Time",permalink:"/autometa/docs/cucumber/test_runner/datetime"},next:{title:"HTTP Client",permalink:"/autometa/docs/cucumber/test_runner/http-client"}},l={},p=[{value:"Setup",id:"setup",level:2},{value:"Before",id:"before",level:2},{value:"After",id:"after",level:2},{value:"Teardown",id:"teardown",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hooks"},"Hooks"),(0,o.kt)("p",null,"The following hooks are supported:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Before"),(0,o.kt)("li",{parentName:"ul"},"After"),(0,o.kt)("li",{parentName:"ul"},"setup"),(0,o.kt)("li",{parentName:"ul"},"Teardown")),(0,o.kt)("p",null,"Hooks can be defined in files with the following extensions, and should be located under the ",(0,o.kt)("inlineCode",{parentName:"p"},"stepDefinitionsRoot")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.hooks.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.before.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.after.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.setup.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.teardown.ts"))),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"The setup hook is executed before any tests are run. It is useful for bootstrapping the environment.\nThe setup call back recieves a special copy of the app which is shared between all ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TearDown"),"\ncalls but not tests or other hooks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Setup } from "@autometa/runner";\n\nSetup("Setup the services \'foo\'", (app) => {\n  app.world.foo = 2;\n});\n')),(0,o.kt)("h2",{id:"before"},"Before"),(0,o.kt)("p",null,"The before hook is executed before each test. It is useful for setting up the world in advance\nof a test, setting up data from the service or preparing data base entries."),(0,o.kt)("p",null,"Before recieves the same copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," that the test it preceeds will have."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Before } from "@autometa/runner";\nimport { setupFooObject } from "../objects";\n\nBefore("Setup the services \'foo\'", (app) => {\n  return app.myHttpClient.post("/foo", setupFooObject);\n});\n')),(0,o.kt)("h2",{id:"after"},"After"),(0,o.kt)("p",null,"The after hook is executed after each test. It is useful for cleaning up data from the service\nor database, or resetting the environment to a known state."),(0,o.kt)("p",null,"After recieves the same copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," that the test it succeeds will have."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { After } from "@autometa/runner";\n\nAfter("Reset the services \'foo\'", (app) => {\n  return app.myHttpClient.delete("/foo", app.world.someId);\n});\n')),(0,o.kt)("h2",{id:"teardown"},"Teardown"),(0,o.kt)("p",null,"The teardown hook is executed after all tests have run. It is useful for cleaning up the environment\nafter all tests have run. It shares the same copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," as the ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup")," hook."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Teardown } from "@autometa/runner";\n\nTeardown("Reset the services \'foo\'", (app) => {\n  return app.myHttpClient.delete("/foo?type=testType");\n});\n')))}m.isMDXComponent=!0}}]);