"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[5649],{7522:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(9901);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=s(n),f=o,d=l["".concat(u,".").concat(f)]||l[f]||m[f]||a;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[l]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(4321),o=(n(9901),n(7522));const a={sidebar_position:6},i="Hooks",p={unversionedId:"cucumber/test_runner/hooks",id:"cucumber/test_runner/hooks",title:"Hooks",description:"Autometa supports the following hooks: Setup, Before, After, Teardown.",source:"@site/docs/cucumber/test_runner/hooks.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/hooks",permalink:"/autometa/docs/cucumber/test_runner/hooks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/hooks.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"cucumberRunnerBar",previous:{title:"Fixtures",permalink:"/autometa/docs/cucumber/test_runner/fixtures"},next:{title:"Test Scopes",permalink:"/autometa/docs/cucumber/test_runner/test-groups"}},u={},s=[],c={toc:s},l="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hooks"},"Hooks"),(0,o.kt)("p",null,"Autometa supports the following hooks: ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Before"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"After"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Teardown"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Setup")," will be run before any scenarios. ",(0,o.kt)("inlineCode",{parentName:"p"},"Teardown")," will be run after all\nscenarios."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Before")," will run before ",(0,o.kt)("em",{parentName:"p"},"each")," scenario, and ",(0,o.kt)("inlineCode",{parentName:"p"},"After")," runs after ",(0,o.kt)("em",{parentName:"p"},"each")," scenario.\nBoth ",(0,o.kt)("inlineCode",{parentName:"p"},"Before")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"After")," recieve a copy of the ",(0,o.kt)("a",{parentName:"p",href:"./app"},"App")," if it's defined."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," argument in ",(0,o.kt)("inlineCode",{parentName:"p"},"Before")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Each")," will be the same as the one used\nby the ",(0,o.kt)("inlineCode",{parentName:"p"},"Scenario")," that triggered them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Setup, Before, After, Teardown } from "@autometa/cucumber-runner";\n\nSetup(() => console.log("setting up"));\n\n// optional description (availabbe to all hooks)\nSetup("Set up the foo data", () => console.log("setting up"));\n\nBefore(async ({ apiClient }: App) => {\n  await apiClient.setupTestData();\n});\n\nAfter(async ({ apiClient }: App) => {\n  await apiClient.cleanupTestData();\n});\n\nTearDown(() => console.log("exiting"));\n')),(0,o.kt)("p",null,"Like Steps, Hooks can be scoped. If a Hook is defined inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"Feature")," callback,\nit will only execute before tests in that feature. If a rule, only tests in that rule.\nIf a scenario outline, only the scenarios generated by that outline etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Feature(() => {\n  Before("run only for these tests", () => {});\n}, "./my-feature.ts");\n')))}m.isMDXComponent=!0}}]);