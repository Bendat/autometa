"use strict";(self.webpackChunkautometa=self.webpackChunkautometa||[]).push([[312],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),l=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(n),u=a,h=c["".concat(d,".").concat(u)]||c[u]||m[u]||r;return n?o.createElement(h,s(s({ref:t},p),{},{components:n})):o.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4964:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(5882),a=n(950),r=(n(9496),n(9613)),s=["components"],i={},d="Writing Tests",l={unversionedId:"ui-testing/user-behaviors/tests",id:"ui-testing/user-behaviors/tests",title:"Writing Tests",description:"Tests are lead by a Particpant (product user/consumer) of a Focus Group of Participants and are written from the perspective of those users.",source:"@site/docs/2_ui-testing/2_user-behaviors/8_tests.md",sourceDirName:"2_ui-testing/2_user-behaviors",slug:"/ui-testing/user-behaviors/tests",permalink:"/autometa/docs/ui-testing/user-behaviors/tests",editUrl:"https://github.com/Bendat/autometa/docs/2_ui-testing/2_user-behaviors/8_tests.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Assertions",permalink:"/autometa/docs/ui-testing/user-behaviors/assertions"},next:{title:"DTO & Builder Pattern",permalink:"/autometa/docs/utility-libraries/dto-builder"}},p=[{value:"Assertions",id:"assertions",children:[],level:2}],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"writing-tests"},"Writing Tests"),(0,r.kt)("p",null,"Tests are lead by a ",(0,r.kt)("inlineCode",{parentName:"p"},"Particpant")," (product user/consumer) of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Focus Group")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"Participants")," and are written from the perspective of those users."),(0,r.kt)("p",null,"To start a test, declare a user, create a Focus Group of Participants and construct them using ",(0,r.kt)("inlineCode",{parentName:"p"},"FocusGroup.begin"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"FocusGroup.begin")," initializes your ",(0,r.kt)("inlineCode",{parentName:"p"},"Participants")," and returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Facilitator")," of the group, who will manage the Web Driver."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This example uses Jest but Cucumber can also be used, or any\nother testing framework."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Browser(new Builder())\nclass MyUsers {\n  @Role('Customer')\n  @Browses('http://MySite.com')\n  @Facilitator\n  Johnny: Participant;\n}\n\ndescribe('MySite E2E tests', () => {\n  let Johnny: User;\n  beforeEach(() => {\n    Johnny = FocusGroup.begin(MyUsers);\n  });\n});\n")),(0,r.kt)("p",null,"To create our test, we must have ",(0,r.kt)("a",{parentName:"p",href:"./actions"},(0,r.kt)("inlineCode",{parentName:"a"},"Action"),"s")," and ",(0,r.kt)("a",{parentName:"p",href:"./observations"},(0,r.kt)("inlineCode",{parentName:"a"},"Observation"),"s")," defined which our users can access."),(0,r.kt)("p",null,"Assume we have the following ",(0,r.kt)("inlineCode",{parentName:"p"},"WebPages")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyHomePage extends WebPage {\n  @component(By.id('login-btn'))\n  loginButton: Button;\n  @component(By.id('login-modal'))\n  loginModal: LoginModal;\n}\n\nexport class MyTodoPage extends WebPage {\n  @component(By.id('add-todo-input'))\n  addTodoItemInput: Button;\n  @component(By.id('add-todo-button'))\n  addTodoItemButton: Button;\n  @collection(By.id('todo-list'), TodoEntry, By.css('li'))\n  currentTodos: Collection<TodoEntry>;\n}\n")),(0,r.kt)("p",null,"and these ",(0,r.kt)("inlineCode",{parentName:"p"},"Component"),"s"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class LoginModal extends Component {\n  @component(By.id('username-field'))\n  usernameField: TextInput;\n  @component(By.id('password-field'))\n  passwordField: TextInput;\n  @component(By.id('log-user-in-btn'))\n  loginButton: Button;\n}\n\nexport class TodoEntry extends Component {\n  @component(By.className('todo-completed-checkbox'))\n  isCompletedCheckbox: Checkbox;\n  @component(By.css('p'))\n  todoDescription: Paragraph;\n}\n")),(0,r.kt)("p",null,"We can start making observations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const LoginArea = Observe(MyHomePage, ({ loginModal }) => loginModal);\nconst TodoEntry = (atIndex: number) =>\n  Observe(MyTodoPage, ({ currentTodos: { at } }) => at(atIndex));\nconst TodoCount = Observe(MyTodoPage, (currentTodos: { length }) => length);\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Not every (or indeed any) component needs an observations. Actions can traverse\nthrough a page also like observers do, however observers promote composition and reduce code repetition."))),(0,r.kt)("p",null,"Next some actions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const LoginAs = (username: string, password: string) =>\n  ActionOn(LoginArea, async ({ usernameField, passwordField, loginButton }) => {\n    await usernameField.write(username);\n    await passwordField.write(password);\n    await loginButton.click();\n  });\n\nconst AddToDo = (description: string) =>\n  ActionOn(ToDoPage, async ({ addTodoItemInput, addTodoItemButton }) => {\n    await addTodoItemInput.write(description);\n    await addTodoItemButton.click();\n  });\n\nconst MarkToDoCompleted = (atIndex: number) =>\n  ActionOn(\n    TodoEntry(atIndex),\n    async ({ addTodoItemInput, addTodoItemButton }) => {\n      await isCompletedCheckbox.select();\n    }\n  );\n")),(0,r.kt)("p",null,"Now we can write out test scenario:"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The behavior keywords are dynamic and can accommodate direct or fluent\nlanguage. For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," method can be called with the same type of argument\nas its preceding call (actions for ",(0,r.kt)("inlineCode",{parentName:"p"},"will")," and observations for ",(0,r.kt)("inlineCode",{parentName:"p"},"see"),"), or it can be\nused as a property to access other behaviors such as ",(0,r.kt)("inlineCode",{parentName:"p"},"will")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"see")),(0,r.kt)("p",{parentName:"div"},"Example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Johnny.will(DoSomething).and(DoSomethingElse).and.see(SomeObservation, SomeAssertion);\n\nJohnny.will(DoSomething).and.will(DoSomethingElse).and.see(SomeObservation, Some Assertion)\n\nJohnny.will.see(SomeObservation, SomeAssertion).and(SomeOtherObservation,SomeOtherAssertion )\n")),(0,r.kt)("p",{parentName:"div"},"All of these are valid. Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," accommodates the arguments of the most recently called behavior. ",(0,r.kt)("inlineCode",{parentName:"p"},"see().and()")," will accept an Observation and Assertion, while ",(0,r.kt)("inlineCode",{parentName:"p"},"will().and()")," will accept a spread\nlist of Actions"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Using Jest'",title:"'Using","Jest'":!0},"import { myEnv } from '../';\nimport { Participant, FocusGroup } from '@autometa/behaviors';\nimport { LoginAs, AddToDo, MarkToDoComplete } from './my-actions';\n\ndescribe('MySite E2E tests', () => {\n  let Johnny: Participant;\n  beforeEach(() => (Johnny = Community.of(MyCommunity).following('Johnny')));\n\n  // List of actions\n  test('Johnny should login, add a new \"to do\" and mark the first entry completed', async () => {\n    await Johnny.will(\n      loginAs(myEnv.username, myEnv.password),\n      AddToDo('pass this test'),\n      MarkToDoCompleted(0)\n    );\n  });\n\n  // Chain of actions\n  test('Johnny should login, add a new \"to do\" and mark the first entry completed', async () => {\n    await Johnny.will(loginAs(myEnv.username, myEnv.password))\n      .and(AddToDo('pass this test'))\n      .and(MarkCompleted(0));\n  });\n});\n")),(0,r.kt)("h2",{id:"assertions"},"Assertions"),(0,r.kt)("p",null,"You can make assertions about the state of the world with the ",(0,r.kt)("inlineCode",{parentName:"p"},"see")," method, passing an observation we have made and providing an assertion to verify it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Using Jest'",title:"'Using","Jest'":!0},"import { myEnv } from '../';\nimport { Participant, FocusGroup } from '@autometa/behaviors';\nimport { LoginAs, AddToDo, MarkToDoComplete } from './my-actions';\n\ndescribe('MySite E2E tests', () => {\n  let Johnny: Participant;\n  beforeEach(() => {\n    Johnny = FocusGroup.begin(MyUsers);\n  });\n\n  test('Johnny should login, add a new \"to do\" and mark the first entry completed', async () => {\n    await Johnny.will(loginAs(myEnv.username, myEnv.password))\n      .see(TodoCount, Is('0')) // checks that result is string '0'\n      .will(AddToDo('pass this test'), MarkToDoCompleted(0))\n      .see(TodoCount, IsNumber(1)); //checks that result is numeric and equal to 1\n  });\n});\n")))}m.isMDXComponent=!0}}]);