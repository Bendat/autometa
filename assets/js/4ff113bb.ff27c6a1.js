"use strict";(self.webpackChunkautometa=self.webpackChunkautometa||[]).push([[728],{9613:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=o,u=c["".concat(l,".").concat(g)]||c[g]||d[g]||i;return n?a.createElement(u,r(r({ref:t},m),{},{components:n})):a.createElement(u,r({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7343:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var a=n(5882),o=n(950),i=(n(9496),n(9613)),r=["components"],s={},l="Pages",p={unversionedId:"ui-testing/page-component-model/pages",id:"ui-testing/page-component-model/pages",title:"Pages",description:"A page is a simple class which defines properties decorated with @page or @component. A page must derive from the WebPage class.",source:"@site/docs/2_ui-testing/1_page-component-model/2_pages.md",sourceDirName:"2_ui-testing/1_page-component-model",slug:"/ui-testing/page-component-model/pages",permalink:"/autometa/docs/ui-testing/page-component-model/pages",editUrl:"https://github.com/Bendat/autometa/docs/2_ui-testing/1_page-component-model/2_pages.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/autometa/docs/ui-testing/page-component-model/intro"},next:{title:"Components",permalink:"/autometa/docs/ui-testing/page-component-model/components"}},m=[{value:"Launching other Pages",id:"launching-other-pages",children:[],level:2}],c={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pages"},"Pages"),(0,i.kt)("p",null,"A page is a simple class which defines properties decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@page")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@component"),". A page must derive from the ",(0,i.kt)("inlineCode",{parentName:"p"},"WebPage")," class."),(0,i.kt)("p",null,"To create a page, simply create your class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyHomePage extends WebPage {}\n")),(0,i.kt)("p",null,"And that's it! You're ready to start testing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Jest Example'",title:"'Jest","Example'":!0},"import { siteUrl, configuredDriveBuilder } from '../my-setup';\nconst site = Site(siteUrl, configuredDriveBuilder);\n\ndescribe('testing my home page loaded', () => {\n  let page: MyHomePage;\n\n  beforeEach(async () => {\n    page = await site.Browse(MyHomePage);\n  });\n\n  it('should have the title \"My Home Page\"', async () => {\n    await page.waitForTitleIs('My Home Page');\n  });\n\n  afterEach(async () => {\n    await driver.quit();\n  });\n});\n")),(0,i.kt)("p",null,"Now you can start adding ",(0,i.kt)("a",{parentName:"p",href:"components"},"Components")," to your page. Components are wrappers over ",(0,i.kt)("inlineCode",{parentName:"p"},"WebElement")," that restrict\naccess to WebElements unless explicitly exposed. A number of ",(0,i.kt)("a",{parentName:"p",href:"components#semantic-components"},"semantic Components")," are\nprovided by default. You are encouraged to ",(0,i.kt)("a",{parentName:"p",href:"creating-components"},"make your own")," semantic Components that properly represent\nyour dom."),(0,i.kt)("p",null,"Using simple provided Components we can start creating our page model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyHomePage extends WebPage {\n  @component(By.id('login-btn'))\n  loginButton: Button;\n}\n")),(0,i.kt)("p",null,"Your button is now ready to interact with. Buttons expose the ",(0,i.kt)("inlineCode",{parentName:"p"},"getText()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"click()")," methods of Selenium as ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," (a getter, not a function) and ",(0,i.kt)("inlineCode",{parentName:"p"},"click()")," respectively."),(0,i.kt)("p",null,"Perhaps you have already made a ",(0,i.kt)("inlineCode",{parentName:"p"},"LoginModal")," component which provides input fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyHomePage extends WebPage {\n  @component(By.id('login-btn'))\n  loginButton: Button;\n\n  @component(By.id('login-modal'))\n  loginModal: LoginModal;\n}\n")),(0,i.kt)("p",null,"Which brings you to a ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePage")," when submitted"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='login-modal.ts'",title:"'login-modal.ts'"},"export class LoginModal extends WebPage {\n  @component(By.id('login-btn'))\n  usernameField: TextInput;\n\n  @component(By.id('login-btn'))\n  passwordField: TextInput;\n\n  submit: Submit = this.submit;\n\n  // alternatively\n  async submit() {\n    await super.submit();\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyHomePage extends WebPage {\n  @page()\n  profilePage: ProfilePage;\n\n  @component(By.id('login-btn'))\n  loginButton: Button;\n\n  @component(By.id('login-modal'))\n  loginModal: LoginModal;\n}\n")),(0,i.kt)("p",null,"And our test is now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Jest Example'",title:"'Jest","Example'":!0},"import { siteUrl, configuredDriver } from '../my-setup';\nconst site = Site(siteUrl, configuredDriver);\n\ndescribe('testing my home page loaded', () => {\n  let page: MyHomePage;\n\n  beforeEach(async () => {\n    page = await site.Browse(MyHomePage);\n  });\n\n  it('should have the title \"My Home Page\"', async () => {\n    await page.waitForTitleIs('My Home Page');\n    await page.loginButton.click();\n    await page.loginModal.username.write('me@you.com');\n    await page.loginModal.password.write('5ecur3');\n    await page.loginModal.submit();\n    await page.profilePage.waitForTitleIs('My Name');\n  });\n\n  afterEach(async () => {\n    await driver.quit();\n  });\n});\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Page and WebComponent methods use fat-arrow functions and can be safely de-structured to reduce chaining."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"it('should test my page', async () => {\n  const {\n    loginButton,\n    searchBar,\n    blogPosts: {\n      highlighted: { title, intro, date },\n      yesterdays: { date: yesterdaysDate },\n    },\n  } = myHomePage;\n\n  await loginButton.click();\n  await searchBar.showsSuggestion(\n    \"We've\",\n    \"We've been trying to reach you about your cars extended warranty\"\n  );\n  expect(await title.text).toBe('It might be one of the days of all time');\n  expect(await yesterdaysDate.datetime).toBe(MyDateUtil.yesterday);\n\n  // .... etc\n});\n")),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"Site")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"blueprint")," method that will return a valid but\nuseless blueprint of your Page. It can be used to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),"\nstatement outside of your test functions which can be assigned by\n",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach")),(0,i.kt)("p",{parentName:"div"},"e.g."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let {\n    loginButton,\n    searchBar,\n    blogPosts: {\n      highlighted: { title, intro, date },\n      yesterdays: { date: yesterdaysDate },\n    },\n  } : MyHomePage = site.blueprint(MyHomePage)\n\nbeforeEach(()=>{\n  ({\n    loginButton,\n    searchBar,\n    blogPosts: {\n      highlighted: { title, intro, date },\n      yesterdays: { date: yesterdaysDate },\n    },\n  } = site.browse(MyHomePage))\n}\n\nit('should test my page', async () => {\n  await loginButton.click();\n  await searchBar.showsSuggestion(\n    \"We've\",\n    \"We've been trying to reach you about your cars extended warranty\"\n  );\n  expect(await title.text).toBe('It might be one of the days of all time');\n  expect(await yesterdaysDate.datetime).toBe(MyDateUtil.yesterday);\n\n  // .... etc\n});\n")))),(0,i.kt)("p",null,"You can also use functions in your Components. These can act to group behavior together\nas you feel appropriate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyHomePage extends WebPage {\n  @page()\n  profilePage: ProfilePage;\n\n  @component(By.id('login-btn'))\n  loginButton: Button;\n\n  @component(By.id('login-modal'))\n  loginModal: LoginModal;\n\n  async login(username: string, password: string) {\n    await this.loginButton.click();\n    await this.loginModal.login(username, password);\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='login-modal.ts'",title:"'login-modal.ts'"},"export class LoginModal extends WebPage, Submittable {\n  @component(By.id('username-field'))\n  usernameField: TextInput;\n\n  @component(By.id('password-field'))\n  passwordField: TextInput;\n\n  submit: Submit = this.submit\n\n  async login(username: string, password: string){\n    await this.usernameField.write(username)\n    await this.usernameField.write(password)\n    await this.submit()\n  }\n}\n")),(0,i.kt)("p",null,"which makes our test:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Jest Example'",title:"'Jest","Example'":!0},"import { siteUrl, configuredDriver } from '../my-setup';\nconst site = Site(siteUrl, configuredDriver);\n\ndescribe('testing my home page loaded', () => {\n  let page: MyHomePage;\n\n  beforeEach(async () => {\n    page = await site.Browse(MyHomePage);\n  });\n\n  it('should have the title \"My Home Page\"', async () => {\n    await page.waitForTitleIs('My Home Page');\n    await page.login('me@you.com', '5ecur3');\n    await page.profilePage.waitForTitleIs('My Name');\n  });\n\n  afterEach(async () => {\n    await driver.quit();\n  });\n});\n")),(0,i.kt)("h2",{id:"launching-other-pages"},"Launching other Pages"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Site")," function returns an object that contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"browse")," and both a ",(0,i.kt)("inlineCode",{parentName:"p"},"leave")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"quit")," method. ",(0,i.kt)("inlineCode",{parentName:"p"},"leave")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"quit")," exit\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"WebDriver")," while ",(0,i.kt)("inlineCode",{parentName:"p"},"Browse")," accepts a ",(0,i.kt)("inlineCode",{parentName:"p"},"WebPage")," class reference (not an object instantiated with ",(0,i.kt)("inlineCode",{parentName:"p"},"new"),", just the class blueprint).\nBrowse will instantiate your Web Page for you and all of it's dependencies."),(0,i.kt)("p",null,"It also contains ",(0,i.kt)("inlineCode",{parentName:"p"},"visit"),", which is similar to browse except\nit works on an already running WebDriver (browse will attempt to start\nthe WebDriver)."),(0,i.kt)("p",null,"If a HTTP ",(0,i.kt)("inlineCode",{parentName:"p"},"route")," is configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"WebPage")," instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"browse")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"visit")," will attempt to load the configured route."),(0,i.kt)("p",null,"e.g"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MySecondPage extends WebPage {\n  override route = 'second';\n}\n")),(0,i.kt)("p",null,"Which for the url ",(0,i.kt)("inlineCode",{parentName:"p"},"my-site.com")," will visit ",(0,i.kt)("inlineCode",{parentName:"p"},"my-site.com/second"),". If\na route is passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"browse")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"visit")," it will override the inherited route."))}d.isMDXComponent=!0}}]);