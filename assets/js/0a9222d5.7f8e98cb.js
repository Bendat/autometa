"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[9861],{4993:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(2983);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),u=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,h=p["".concat(i,".").concat(d)]||p[d]||m[d]||s;return r?a.createElement(h,o(o({ref:t},c),{},{components:r})):a.createElement(h,o({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var u=2;u<s;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1949:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(2983),n=r(4517);const s={tabItem:"tabItem_BTU7"};function o(e){let{children:t,hidden:r,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(s.tabItem,o),hidden:r},t)}},837:(e,t,r)=>{r.d(t,{Z:()=>w});var a=r(3050),n=r(2983),s=r(4517),o=r(2967),l=r(3729),i=r(7742),u=r(7392),c=r(1419);function p(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function m(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function d(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:r}=e;const a=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i._X)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function f(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,s=m(e),[o,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[i,u]=h({queryString:r,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:a}),b=(()=>{const e=i??p;return d({value:e,tabValues:s})?e:null})();(0,n.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var b=r(3500);const k={tabList:"tabList_laEr",tabItem:"tabItem_VkkT"};function g(e){let{className:t,block:r,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),m=e=>{const t=e.currentTarget,r=c.indexOf(t),a=u[r].value;a!==l&&(p(t),i(a))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:m},o,{className:(0,s.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":l===t})}),r??t)})))}function y(e){let{lazy:t,children:r,selectedValue:a}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=f(e);return n.createElement("div",{className:(0,s.Z)("tabs-container",k.tabList)},n.createElement(g,(0,a.Z)({},e,t)),n.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return n.createElement(v,(0,a.Z)({key:String(t)},e))}},6209:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=r(3050),n=(r(2983),r(4993)),s=r(837),o=r(1949);const l={sidebar_position:5},i="Phrases",u={unversionedId:"cucumber/test_runner/phrases",id:"cucumber/test_runner/phrases",title:"Phrases",description:"Phrases, or 'Human Readable Phrases' are a pattern of obscuring implementation",source:"@site/docs/cucumber/test_runner/phrases.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/phrases",permalink:"/autometa/docs/cucumber/test_runner/phrases",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/phrases.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"cucumberRunnerBar",previous:{title:"Cucumber Expressions",permalink:"/autometa/docs/cucumber/test_runner/cucumber_expressions"},next:{title:"Date Time",permalink:"/autometa/docs/cucumber/test_runner/datetime"}},c={},p=[{value:"Using Phrases",id:"using-phrases",level:3},{value:"Transformers",id:"transformers",level:3}],m={toc:p},d="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"phrases"},"Phrases"),(0,n.kt)("p",null,"Phrases, or 'Human Readable Phrases' are a pattern of obscuring implementation\ndetails when writing gherkin, by creating phrases that can be transformed into\nindex keys of some object."),(0,n.kt)("p",null,"Imagine are performing an API test and we have 2 relevant steps:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"When I create the user"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'Makes a HTTP call to our APIs POST /user endpoint with the DTO { name: "John", email: "',(0,n.kt)("a",{parentName:"li",href:"mailto:john@bobmail.com"},"john@bobmail.com"),'" }'),(0,n.kt)("li",{parentName:"ul"},"Stores the response in the World object under the key ",(0,n.kt)("inlineCode",{parentName:"li"},"createUserResponse")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Then 'createUserResponse' result is 'OK'"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Asserts that the response stored in the World object under the key ",(0,n.kt)("inlineCode",{parentName:"li"},"createUserResponse")," has a status code of 200"),(0,n.kt)("li",{parentName:"ul"},"Generic step that can be reused across any API test"),(0,n.kt)("li",{parentName:"ul"},"We want to use a more abstracted key, ",(0,n.kt)("inlineCode",{parentName:"li"},"'Create User'")," instead of implementation detail ",(0,n.kt)("inlineCode",{parentName:"li"},"'createUserResponse'"))))),(0,n.kt)("h3",{id:"using-phrases"},"Using Phrases"),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"exposed",label:"Exposed Details",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"title=Gherkin",title:"Gherkin"},"Scenario: Creating a user\n  Given I have a user with the name \"John\"\n  And the users email is \"john@bobmail.com\"\n  When I create the user\n  Then 'createUserResponse' result is 'OK'\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=Steps",title:"Steps"},'import { Given, When, Then } from "@autometa/runner";\nimport { StatusCodes } from "@autometa/status-codes";\n\nGiven("I have a user with the name {string}", ({ world }, name) => {\n  world.createUserDto = { name };\n});\n\nGiven("the users email is {string}", ({ world }, email) => {\n  world.createUserDto.email = email;\n});\n\nWhen("I create the user", async ({ world, http }) => {\n  world.createUserResponse = await http.post("/user", world.createUserDto);\n});\n\nThen(\n  "{string} result is {string}",\n  (property, status, { world }, key, value: keyof StatusCodes) => {\n    // assert status to equal { status: 200, statusText: "OK" }\n    expect(world[key].status).toEqual(StatusCodes[value]);\n  }\n);\n'))),(0,n.kt)(o.Z,{value:"phrase",label:"Human Friendly Phrase",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"title=Gherkin",title:"Gherkin"},"Scenario: Creating a user\n  Given I have a user with the name \"John\"\n  And the users email is \"john@bobmail.com\"\n  When I create the user\n  Then 'Create User' result is 'OK'\n")),(0,n.kt)("p",null,"This removes the code-style camelCased variable, but no longer represents a property of the world.\nTo accomplish this, we can access the ",(0,n.kt)("inlineCode",{parentName:"p"},"World.fromPhrase")," method, which will process the gherkin\nstring with some rules we can define, such as making it ",(0,n.kt)("inlineCode",{parentName:"p"},"camelCase")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"snake_case"),", or adding a\nprefix or suffix"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=Steps",title:"Steps"},'import { Given, When, Then, sfx, camelCase } from "@autometa/runner";\nimport { StatusCodes } from "@autometa/status-codes";\n\nGiven("I have a user with the name {string}", ({ world }, name) => {\n  world.createUserDto = { name };\n});\n\nGiven("the users email is {string}", ({ world }, email) => {\n  world.createUserDto.email = email;\n});\n\nWhen("I create the user", async ({ world, http }) => {\n  world.createUserResponse = await http.post("/user", world.createUserDto);\n});\n\nThen(\n  "{string} result is {string}",\n  (property, status, { world }, key, value: keyof StatusCodes) => {\n    // \'Create User\' -> \'Create User Response\' -> \'createUserResponse\'\n    const key = world.fromPhrase(property, sfx`Response`, camel);\n    expect(world[key].status).toEqual(StatusCodes[value]);\n  }\n);\n')))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=World",title:"World"},'import { AutometaWorld } from "@autometa/runner";\nimport { HTTPResponse } from "http-library";\n\nexport class World extends AutometaWorld {\n  declare createUserDto: CreateUserDto;\n  declare createUserResponse: HTTPResponse;\n}\n')),(0,n.kt)("h3",{id:"transformers"},"Transformers"),(0,n.kt)("p",null,"Phrases are controlled by transformer or ",(0,n.kt)("inlineCode",{parentName:"p"},"mutation")," actions which are appended\nto the phrase. They are applied in the order they are defined. Some, like the case-mutations (camel, upper) will\noverride previous."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"camel")," - converts the phrase to camelCase"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"snake")," - converts the phrase to snake_case"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"kebab")," - converts the phrase to kebab-case"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pascal")," - converts the phrase to PascalCase"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"sfx")," - adds a suffix to the phrase with a space"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pfx")," - adds a prefix to the phrase with a space"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"trim")," - trims the phrase, removing all white leading and trailing space"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"lower")," - converts the phrase to lower case"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"upper")," - converts the phrase to upper case")),(0,n.kt)("hr",null),(0,n.kt)("p",null,"It's also possible to use phrases generically, in your steps or in other parts of your\nsupporting code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { camel, sfx, From } from "@autometa/runner";\n\nconst dummyObject = {\n  statusCode: 200\n  statusText: \'OK\'\n};\n\nconst status = From(dummyObject).byPhrase("status", sfx`text`, camel) as string;\n')),(0,n.kt)("p",null,"You can also attach a phrase parser to classes with a decorator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { camel, sfx, From, IFromPhrase PhraseParser } from "@autometa/runner";\n\n@PhraseParser\nclass DummyObject {\n  statusCode: number;\n  statusText: string;\n  declare fromPhrase: IFromPhrase\n}\n\n')),(0,n.kt)("p",null,"A phrase parser will be injected into instances of the class and can be used directly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'const dummyObject = new DummyObject();\n\nconst status = dummyObject.fromPhrase("status", sfx`text`, camel) as string;\n')),(0,n.kt)("hr",null),(0,n.kt)("p",null,"Only one ",(0,n.kt)("inlineCode",{parentName:"p"},"case")," mutation can be succesfully applied to a phrase, however some custom\noutput formats should be achievable."),(0,n.kt)("p",null,"For example the format ",(0,n.kt)("inlineCode",{parentName:"p"},"dbCollection__Users")," could be achieved with"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'From(foo).byPhrase("Db Collection", camel, sfx`__Users`, trim);\n')),(0,n.kt)("p",null,"Which camel cases the phrase, adds a suffix of ",(0,n.kt)("inlineCode",{parentName:"p"},"__Users")," and trims white space between them."))}h.isMDXComponent=!0}}]);