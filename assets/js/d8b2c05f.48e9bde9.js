"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[6287],{4993:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(2983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||l[d]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:a,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},762:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(3050),a=(n(2983),n(4993));const o={sidebar_position:2},s="Schemas and Types",c={unversionedId:"cucumber/test_runner/api-testing/schemas-and-interfaces",id:"cucumber/test_runner/api-testing/schemas-and-interfaces",title:"Schemas and Types",description:"Next we'll define Schemas and our Types/Interfaces for the API Request",source:"@site/docs/cucumber/test_runner/api-testing/schemas-and-interfaces.mdx",sourceDirName:"cucumber/test_runner/api-testing",slug:"/cucumber/test_runner/api-testing/schemas-and-interfaces",permalink:"/autometa/docs/cucumber/test_runner/api-testing/schemas-and-interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/api-testing/schemas-and-interfaces.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"cucumberRunnerBar",previous:{title:"Configuring Jest",permalink:"/autometa/docs/cucumber/test_runner/api-testing/configuring-jest"},next:{title:"Setting up a HTTP Client",permalink:"/autometa/docs/cucumber/test_runner/api-testing/http-clients"}},i={},p=[],u={toc:p},m="wrapper";function l(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"schemas-and-types"},"Schemas and Types"),(0,a.kt)("p",null,"Next we'll define Schemas and our Types/Interfaces for the API Request\nand response bodies."),(0,a.kt)("p",null,"Focusing on ",(0,a.kt)("inlineCode",{parentName:"p"},"product"),", we have the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  "id": 1,\n  "title": "iPhone 9",\n  "description": "An apple mobile which is nothing like apple",\n  "price": 549,\n  "discountPercentage": 12.96,\n  "rating": 4.69,\n  "stock": 94,\n  "brand": "Apple",\n  "category": "smartphones",\n  "thumbnail": "...",\n  "images": ["...", "...", "..."]\n}\n')),(0,a.kt)("p",null,"We can break this down into a shape:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  discountPercentage: number;\n  rating: number;\n  stock: number;\n  brand: string;\n  category: string;\n  thumbnail: string;\n  images: string[];\n}\n")),(0,a.kt)("p",null,"This represents the shape we expect our product objects to have. It's worth\nnoting that we've lost information. ",(0,a.kt)("inlineCode",{parentName:"p"},"stock")," is defined as a number, but we\nspecifically want to ensure it's an integer."),(0,a.kt)("p",null,"We'll create a new file file to define an integer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/schemas/integer.ts\n\nimport { number } from "myzod";\n\nconst integerSchema = mz\n  .number()\n  .withPredicate(\n    Number.isInteger,\n    (value) => `number must be an integer but got: ${value}`\n  );\n')),(0,a.kt)("p",null,"We'll structure our project by controller. We'll create a ",(0,a.kt)("inlineCode",{parentName:"p"},"product")," folder\nand name our files with the ",(0,a.kt)("inlineCode",{parentName:"p"},"product.*.ts")," extension. To begin create\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/controllers/product/product.schema.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { mz } from "myzod";\nimport { integerSchema } from "../../schemas/integer";\n\nexport const ProductSchema = mz\n  .object({\n    id: mz.number(),\n    title: mz.string(),\n    description: mz.string(),\n    price: mz.number(),\n    discountPercentage: mz.number(),\n    rating: mz.number(),\n    stock: integerSchema,\n    brand: mz.string(),\n    category: mz.string(),\n    thumbnail: mz.string(),\n    images: mz.array(mz.string())\n  })\n')),(0,a.kt)("p",null,"MyZod has an ",(0,a.kt)("inlineCode",{parentName:"p"},"Infer<>")," type helper which can convert a schema into a type.\nCreate a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/controllers/product/product.types.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Infer } from "myzod";\nimport { ProductSchema } from "./product.schema";\n\nexport type Product = Infer<typeof ProductSchema>;\n')),(0,a.kt)("p",null,"Let's also add definitions for ",(0,a.kt)("inlineCode",{parentName:"p"},"Products")," which is an object containing\nan array of products, as well as pagination data."),(0,a.kt)("p",null,"Since MyZod is composable, we can reuse our ",(0,a.kt)("inlineCode",{parentName:"p"},"productSchema")," to define\nthe list elements."),(0,a.kt)("p",null,"The example body is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { mz } from "myzod";\nimport { integerSchema } from "../../schemas/integer";\n\nconst ProductsSchema = mz.object({\n  products: mz.array(productSchema),\n  total: integerSchema,\n  skip: integerSchema,\n  limit: integerSchema\n});\n')),(0,a.kt)("p",null,"And update our types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Infer } from "myzod";\n\nexport type Product = Infer<typeof productSchema>;\n\nexport type Products = Infer<typeof productsSchema>;\n')),(0,a.kt)("p",null,"Since we'll often be dealing with responses, we can define their types here too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Infer } from "myzod";\nimport { HTTPResponse } from "@autometer/runner";\n\nexport type Product = Infer<typeof productSchema>;\nexport type ProductResponse = HTTPResponse<Product>;\n\nexport type Products = Infer<typeof productsSchema>;\nexport type ProductsResponse = HTTPResponse<Products>;\n\n')),(0,a.kt)("p",null,"Next we'll look at creating a client to make requests to our API."))}l.isMDXComponent=!0}}]);