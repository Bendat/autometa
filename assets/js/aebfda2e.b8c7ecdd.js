"use strict";(self.webpackChunkautometa=self.webpackChunkautometa||[]).push([[854],{9613:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(9496);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),p=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=p(e.components);return n.createElement(u.Provider,{value:r},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),c=p(t),d=o,m=c["".concat(u,".").concat(d)]||c[d]||g[d]||l;return t?n.createElement(m,i(i({ref:r},s),{},{components:t})):n.createElement(m,i({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=d;var a={};for(var u in r)hasOwnProperty.call(r,u)&&(a[u]=r[u]);a.originalType=e,a[c]="string"==typeof e?e:o,i[1]=a;for(var p=2;p<l;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6875:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>u,default:()=>g,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var n=t(5882),o=t(950),l=(t(9496),t(9613)),i=["components"],a={},u="Group Logger",p={unversionedId:"utility-libraries/group-logger",id:"utility-libraries/group-logger",title:"Group Logger",description:"Group Logger provides console.group like behavior (console.group is not fully enabled on Node due to it's async nature) either",source:"@site/docs/3_utility-libraries/2_group-logger.md",sourceDirName:"3_utility-libraries",slug:"/utility-libraries/group-logger",permalink:"/autometa/docs/utility-libraries/group-logger",editUrl:"https://github.com/Bendat/autometa/docs/3_utility-libraries/2_group-logger.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DTO & Builder Pattern",permalink:"/autometa/docs/utility-libraries/dto-builder"}},s=[],c={toc:s};function g(e){var r=e.components,t=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"group-logger"},"Group Logger"),(0,l.kt)("p",null,"Group Logger provides ",(0,l.kt)("inlineCode",{parentName:"p"},"console.group")," like behavior (",(0,l.kt)("inlineCode",{parentName:"p"},"console.group")," is not fully enabled on Node due to it's async nature) either\nthrough the ",(0,l.kt)("inlineCode",{parentName:"p"},"GroupLogger")," class or by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"useConsoleGroups")," which\nwill override the ",(0,l.kt)("inlineCode",{parentName:"p"},"console")," module."),(0,l.kt)("p",null,"Groups will indent all logs while they are open, and un-indent once closed. Groups should only be enabled if tests are run in sequence, or only a single test is being run for debugging."),(0,l.kt)("p",null,"For example, in Jest, each test file runs in sequence by default, but all executed test files run in their own individual process. As a result, groups from different files will be mixed together in the same log. This can be circumvented with ",(0,l.kt)("inlineCode",{parentName:"p"},"--runInBand")," but this may hurt performance."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GroupLogger")," will track open groups, and print a warning if a group\nis closed while it's descendant groups are still open."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const logger = new GroupLogger();\nlogger.group('Outer Group');\nlogger.group('Inner Group');\nlogger.log('Http Request Sent');\nlogger.log('Http Response Received');\nlogger.groupEnd();\nlogger.groupEnd();\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"or with console groups enabled")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"console.group('Outer Group');\nconsole.group('Inner Group');\nconsole.log('Http Request Sent');\nconsole.log('Http Response Received');\nconsole.groupEnd();\nconsole.groupEnd();\n")),(0,l.kt)("p",null,"Which will produce the following output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Outer Group\n  Inner Group\n     [Log]\n     Http Request Sent\n     /path/to/file:8:11\n\n     [Log]\n     Http Response Received\n     /path/to/file:9:11\n\n")))}g.isMDXComponent=!0}}]);