"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[8357],{4993:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(2983);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),c=l(r),m=a,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return r?n.createElement(h,i(i({ref:t},d),{},{components:r})):n.createElement(h,i({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5995:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var n=r(3050),a=(r(2983),r(4993));const o={sidebar_position:4},i="DTOs and Builders",u={unversionedId:"cucumber/test_runner/api-testing/builders",id:"cucumber/test_runner/api-testing/builders",title:"DTOs and Builders",description:"Schemas define the shape of our API resources, and can validate responses from the server.",source:"@site/docs/cucumber/test_runner/api-testing/builders.mdx",sourceDirName:"cucumber/test_runner/api-testing",slug:"/cucumber/test_runner/api-testing/builders",permalink:"/autometa/docs/cucumber/test_runner/api-testing/builders",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/api-testing/builders.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"cucumberRunnerBar",previous:{title:"Setting up a HTTP Client",permalink:"/autometa/docs/cucumber/test_runner/api-testing/http-clients"},next:{title:"Enhancing Steps With Cucumber Expressions",permalink:"/autometa/docs/cucumber/test_runner/api-testing/cucumber-expressions"}},s={},l=[{value:"Interfaces - Anonymous Object Builders",id:"interfaces---anonymous-object-builders",level:2},{value:"Deriving a builder and default values",id:"deriving-a-builder-and-default-values",level:3}],d={toc:l},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dtos-and-builders"},"DTOs and Builders"),(0,a.kt)("p",null,"Schemas define the shape of our API resources, and can validate responses from the server.\nTypically, a same or similar shape is also used for requests which create or update resources\nvia ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"PUT")," requests. In our case, the ",(0,a.kt)("inlineCode",{parentName:"p"},"product")," shape is the same wether we are\nretrieving a product, or creating/updating a new one."),(0,a.kt)("p",null,"DTOs are objects which we send to the server. We can take advantage of the types we\n",(0,a.kt)("inlineCode",{parentName:"p"},"Infer"),"red from our schemas."),(0,a.kt)("p",null,"We can automatically create Builder classes implementing the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Builder_pattern"},"Builder Pattern"),"\nusing the package ",(0,a.kt)("inlineCode",{parentName:"p"},"@autometa/dto-builder"),". Since we have already defined our schemas and interfaces,\nwe do not need to redeclare the properties on the class if we extends from the ",(0,a.kt)("inlineCode",{parentName:"p"},"DTO")," function, typed\nwith our interface:"),(0,a.kt)("p",null,"Create a new file for DTOs, which will implement the interfaces generated by our schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/products/product.dto.ts\nimport { Product } from "./product.schema";\nimport { DTO } from "@autometa/dto-builder";\n\nexport class ProductDTO extends DTO<Product> {}\n')),(0,a.kt)("p",null,"Because the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," schema only applies to response payloads, we do not need to make a DTO for it."),(0,a.kt)("p",null,"If we wanted to define default values that are immediately available in the new DTO, we can\nuse the ",(0,a.kt)("inlineCode",{parentName:"p"},"DTO.*")," decorators. When applied, the builder will automatically add a property to the output\nobject containing the defined value. The value can be a raw primitive or object, a factory function which will\nbe evaluated lazily, or a child DTO which will also be instantiated with all default values;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/products/product.dto.ts\nimport { Product } from "./product.schema";\nimport { DTO } from "@autometa/dto-builder";\n\nexport class ProductDTO extends DTO<Product> {\n  @DTO.value("Foo Phone")\n  name: string;\n\n  @DTO.factory(() => "A phone that is foo")\n  description: string;\n}\n')),(0,a.kt)("p",null,"Now make a builder class file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/products/product.builder.ts\nimport { ProductDTO } from "./product.dto";\nimport { Builder } from "@autometa/dto-builder";\n\nexport class ProductBuilder extends Builder(ProductDTO) {}\n')),(0,a.kt)("p",null,"Using a builder is simple. It has setter methods for each property decorated with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Property"),",\nwhich accept a value of the type of that propert on the underlying dto."),(0,a.kt)("p",null,"First we want to consider what our Gherkin might look like. We will want to create a new Product DTO\nusing a builder, so we can use Cucumber Expressions to capture a name for the product, and create\na new builder with that as the name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},'# test/features/products.feature\nFeature: Products\n\n  Scenario: Create a new product\n    Given I have a product named "Foo Phone"\n')),(0,a.kt)("p",null,"We can create a step representing this to prepare our product"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// test/steps/foo\nimport { ProductBuilder } from "../../src/products/product.builder";\nimport { Given } from "@autometa/runner";\n\nGiven("I have a product named {string}", (name, { world }) => {\n  world.productBuilder = new ProductBuilder().name(name);\n});\n')),(0,a.kt)("p",null,"Let's also declare this property on our world:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// test/world.ts\nimport { ProductBuilder, ProductResponse } from "../src/products";\n\nexport interface World {\n  productResponse: ProductResponse;\n  productBuilder: ProductBuilder;\n}\n')),(0,a.kt)("p",null,"We can also apply our builder pattern in ther Gherkin itself. We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," step\ntype to add values to our builder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},'# test/features/products.feature\n\nFeature: Products\n\n  Scenario: Create a new product\n    Given I have a product named "Foo Phone"\n    * I have a product with description "A phone that is foo"\n    * I have a product with price 100\n    * I have a product with quantity 10\n')),(0,a.kt)("p",null,"Since the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," follow a ",(0,a.kt)("inlineCode",{parentName:"p"},"Given")," we will define them as ",(0,a.kt)("inlineCode",{parentName:"p"},"Given"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// test/steps/products.steps.ts\nimport { ProductBuilder } from "../../src/products/product.builder";\nimport { Given } from "@autometa/runner";\n\nGiven("I set the product description to {string}", (description, { world }) => {\n  world.productBuilder = world.productBuilder.withDescription(description);\n});\n\nGiven("I have a product with price {int}", (price, { world }) => {\n  world.productBuilder = world.productBuilder.withPrice(price);\n});\n\nGiven("I set the product quantity to {int}", (quantity, { world }) => {\n  world.productBuilder = world.productBuilder.withQuantity(quantity);\n});\n')),(0,a.kt)("p",null,"This is fine but it creates a lot of steps. This doesn't cover all of our properties yet.\nSince there is a direct reference to a property on our Product in the gherkin string, we can\nuse that to reduce the number of steps we need to write. We can also take advantage of the\nbuilt in ",(0,a.kt)("inlineCode",{parentName:"p"},"primitive")," type which will parse a value into a string, number, boolean, date, undefined,\nor null. The builder has an additonal ",(0,a.kt)("inlineCode",{parentName:"p"},"assign")," method which accepts a string to map a value to it's\nintended property"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { ProductBuilder } from "../../src/products/product.builder";\nimport { Given } from "@autometa/runner";\n\nGiven("I have a product named {string}", (name, { world }) => {\n  world.productBuilder = new ProductBuilder().withName(name);\n});\n\nGiven(\n  "I set the product {string} to {primitive}",\n  (property, value, { world }) => {\n    world.productBuilder = world.productBuilder.assign(property, value);\n  }\n);\n')),(0,a.kt)("p",null,"We could further define the property key as it's own Cucumber Expression, so that it maps\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"keyof Product"),", which we'll look at in the next section."),(0,a.kt)("h2",{id:"interfaces---anonymous-object-builders"},"Interfaces - Anonymous Object Builders"),(0,a.kt)("p",null,"It might not be desirable to build your object as a class. When not used\nto extend a class, the ",(0,a.kt)("inlineCode",{parentName:"p"},"DTO")," function will return an anonymous object builder,\nwith the same interface as the class builder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Builder } from "@autometa/dto-builder";\n\ninterface IUser {\n  id: number;\n  name: string;\n  age: number;\n}\n\nconst UserBuilder = Builder<IUser>();\n')),(0,a.kt)("h3",{id:"deriving-a-builder-and-default-values"},"Deriving a builder and default values"),(0,a.kt)("p",null,"Since anonymous objects cannot be decorated, they cannot\naccept default values or factories which might change between\ninstantiations."),(0,a.kt)("p",null,"To work around this, an anonymous builder is ",(0,a.kt)("inlineCode",{parentName:"p"},"derivable"),". Any values\nassigned to the builder will stay until the builder is built. However\nwhen the ",(0,a.kt)("inlineCode",{parentName:"p"},"derive")," method is called, a new builder will be created,\ncopying the values from the original. If those values are set agin\nin the derived builder, they will not affect the original."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'\nconst bobBuilder = new UserBuilder().id(1).name("bob").age(23);\n\nconst olderBobBuilder = bobBuilder.derive().age(24);\n')))}p.isMDXComponent=!0}}]);