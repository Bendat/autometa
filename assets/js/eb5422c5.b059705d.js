"use strict";(self.webpackChunkautometa=self.webpackChunkautometa||[]).push([[358],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(b,s(s({ref:t},p),{},{components:n})):o.createElement(b,s({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:a,s[1]=r;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2710:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=n(5882),a=n(950),i=(n(9496),n(9613)),s=["components"],r={},l="Forms",c={unversionedId:"ui-testing/page-component-model/practical-examples/forms",id:"ui-testing/page-component-model/practical-examples/forms",title:"Forms",description:"Assume we have a Page with the following DOM, with",source:"@site/docs/2_ui-testing/1_page-component-model/practical-examples/2_forms.md",sourceDirName:"2_ui-testing/1_page-component-model/practical-examples",slug:"/ui-testing/page-component-model/practical-examples/forms",permalink:"/autometa/docs/ui-testing/page-component-model/practical-examples/forms",editUrl:"https://github.com/Bendat/autometa/docs/2_ui-testing/1_page-component-model/practical-examples/2_forms.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"A Simple Article",permalink:"/autometa/docs/ui-testing/page-component-model/practical-examples/an-article"},next:{title:"Complex Types",permalink:"/autometa/docs/ui-testing/page-component-model/practical-examples/complex-types"}},p=[],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"forms"},"Forms"),(0,i.kt)("p",null,"Assume we have a Page with the following DOM, with\nno classes or IDs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<body>\n  <form>\n    <input type="text" />\n    <label>Name</label>\n    <textarea />\n    <label>Description</label>\n    <fieldset>\n      <legend>Role</legend>\n      <input type="radio" name="role" value="seller" />\n      <label>Seller</label>\n      <input type="radio" name="role" value="buyer" />\n      <label>Buyer</label>\n    </fieldset>\n    <fieldset>\n      <legend>Setup</legend>\n      <input type="checkbox" name="setup" value="setup-itl-account" />\n      <label>Set up an international account?</label>\n      <input type="checkbox" name="setup" value="use-cloud-service" />\n      <label>Use cloud service for processing?</label>\n    </fieldset>\n    <input type="submit" />\n  </form>\n</body>\n')),(0,i.kt)("p",null,"This time we'll start by writing our most nested components, the field sets."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class RoleFieldSet extends Component {\n  @component(By.css('input[type=\"radio\"]'))\n  seller: Checkbox;\n\n  @component(By.css('input[type=\"radio\"]:last-of-type'))\n  buyer: CheckBox;\n}\n\nexport class SetupFieldSet extends Component {\n  @component(By.css('input[type=\"checkbox\"]'))\n  internationalAccount: RadioButton;\n\n  @component(By.css('input[type=\"checkbox\"]:last-of-type'))\n  useCloudService: RadioButton;\n}\n")),(0,i.kt)("p",null,"We can add the ",(0,i.kt)("inlineCode",{parentName:"p"},"<label>"),"s the same way if they will be tested."),(0,i.kt)("p",null,"Now we can build our form. For this example we'll skip the ",(0,i.kt)("inlineCode",{parentName:"p"},"<form>")," tag and treat the page as our root container, however for pages\nwith multiple complex behaviors, they should be placed in their own\ncomponents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyFormPage extends WebPage {\n  @component(By.css('input'))\n  nameInput: TextInput;\n\n  @component(By.css('textarea'))\n  description: TextArea;\n\n  @component(By.css('fieldset'))\n  roleSettings: RoleFieldSet;\n\n  @component(By.css('fieldset:last-of-type'))\n  setupSettings: SetupFieldSet;\n\n  @component(By.css('input[type=\"submit\"'))\n  submitForm: SubmitButton;\n}\n")),(0,i.kt)("p",null,"Onto our test"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Using Jest Or Mocha'",title:"'Using",Jest:!0,Or:!0,"Mocha'":!0},"const url = process.env.MY_URL;\nconst wdBuilder = new Builder().forBrowser(Browser.Chrome);\nconst site = Site(url, wdBuilder);\n\ndescribe('Submitting my application form', () => {\n  let page: MyPage;\n\n  beforeEach(async () => {\n    page = await site.browse(MyPage);\n  });\n\n  it('should fill and submit my application form', async () => {\n    const {\n      nameInput,\n      description,\n      roleSettings: { buyer, seller },\n      setupSettings: { internationalAccount, useCloudService },\n      submitButton,\n    } = page;\n\n    await nameInput.write('Bob Franklin');\n    await description.write('I am an appealing candidate because....');\n    await seller.select();\n    await internationalAccount.select();\n\n    expect(await buyer.isSelected).toBe('false');\n    expect(await useCloudService.isSelected).toBe('false');\n\n    await submitButton.submit();\n    await page.waitForTitleIs('Application Submitted');\n  });\n});\n")),(0,i.kt)("p",null,"It's likely this behavior will be repeated across tests, it's\na good idea to compose it into a method on the Component or page\nobject."),(0,i.kt)("p",null,"We can start with our field sets."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class RoleFieldSet extends Component {\n  @component(By.css('input[type=\"radio\"]'))\n  seller: Checkbox;\n\n  @component(By.css('input[type=\"radio\"]:last-of-type'))\n  buyer: CheckBox;\n\n  select = async (role: 'buyer' | 'seller') => {\n    const checkbox = this[role] as Checkbox;\n    await checkbox.click();\n  };\n}\n\nexport class SetupFieldSet extends Component {\n  @component(By.css('input[type=\"checkbox\"]'))\n  internationalAccount: RadioButton;\n\n  @component(By.css('input[type=\"checkbox\"]:last-of-type'))\n  useCloudService: RadioButton;\n\n  select = async (\n    useInternationalAccount: boolean,\n    useCloudService: boolean\n  ) => {\n    if (useInternationalAccount) {\n      await this.internationalAccount.select();\n    }\n    if (useCloudService) {\n      await this.internationalAccount.select();\n    }\n  };\n}\n")),(0,i.kt)("p",null,"And now our form"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyFormPage extends WebPage {\n  @component(By.css('input'))\n  nameInput: TextInput;\n\n  @component(By.css('textarea'))\n  description: TextArea;\n\n  @component(By.css('fieldset'))\n  roleSettings: RoleFieldSet;\n\n  @component(By.css('fieldset:last-of-type'))\n  setupSettings: SetupFieldSet;\n\n  @component(By.css('input[type=\"submit\"'))\n  submitForm: SubmitButton;\n\n  submitApplication = async (\n    name,\n    description,\n    role: string,\n    useIntl: boolean,\n    useCloud: boolean // could also you a JSON object instead of params\n  ) => {\n    await this.nameInput.write(name);\n    await this.description.write(description);\n    await this.roleSettings.select(role);\n    await this.setupSettings.select(useIntl, useCloud);\n    await this.submitForm.submit();\n  };\n}\n")),(0,i.kt)("p",null,"And with that our test becomes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Using Jest Or Mocha'",title:"'Using",Jest:!0,Or:!0,"Mocha'":!0},"const url = process.env.MY_URL;\nconst wdBuilder = new Builder().forBrowser(Browser.Chrome);\nconst site = Site(url, wdBuilder);\n\ndescribe('Submitting my application form', () => {\n  let page: MyPage;\n\n  beforeEach(async () => {\n    page = await site.browse(MyPage);\n  });\n\n  it('should fill and submit my application form', async () => {\n    const { submitApplication, waitForTitleIs } = page;\n\n    await submitApplication('bob', 'my description', 'seller', true, false);\n\n    await waitForTitleIs('Application Submitted');\n  });\n});\n")),(0,i.kt)("p",null,"We could also make it more modular/specific"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyFormPage extends WebPage {\n  @component(By.css('input'))\n  nameInput: TextInput;\n\n  @component(By.css('textarea'))\n  description: TextArea;\n\n  @component(By.css('fieldset'))\n  roleSettings: RoleFieldSet;\n\n  @component(By.css('fieldset:last-of-type'))\n  setupSettings: SetupFieldSet;\n\n  @component(By.css('input[type=\"submit\"'))\n  submitForm: SubmitButton;\n\n  addUserDetails = (name: string, description: string) => {\n    await this.nameInput.write(name);\n    await this.description.write(description);\n  };\n\n  selectSettings = async (\n    role: string,\n    useIntl: boolean,\n    useCloud: boolean\n  ) => {\n    await this.roleSettings.select(role);\n    await this.setupSettings.select(useIntl, useCloud);\n  };\n\n  submit: Submit = this.submit;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Using Jest Or Mocha'",title:"'Using",Jest:!0,Or:!0,"Mocha'":!0},"const url = process.env.MY_URL;\nconst wdBuilder = new Builder().forBrowser(Browser.Chrome);\nconst site = Site(url, wdBuilder);\n\ndescribe('Submitting my application form', () => {\n  let page: MyPage;\n\n  beforeEach(async () => {\n    page = await site.browse(MyPage);\n  });\n\n  it('should fill and submit my application form', async () => {\n    const { addUserDetails, selectSettings, submit, waitForTitleIs } = page;\n\n    await addUserDetails('bob', 'my description');\n    await selectSettings('seller', true, false);\n    await submit();\n\n    await waitForTitleIs('Application Submitted');\n  });\n});\n")))}m.isMDXComponent=!0}}]);