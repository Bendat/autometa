"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[7280],{4993:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(2983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(3050),a=(n(2983),n(4993));const o={sidebar_position:5},s="Enhancing Steps With Cucumber Expressions",i={unversionedId:"cucumber/test_runner/api-testing/cucumber-expressions",id:"cucumber/test_runner/api-testing/cucumber-expressions",title:"Enhancing Steps With Cucumber Expressions",description:"In the last section we looked at setting up a builder for our request DTOs. Now we'll look at",source:"@site/docs/cucumber/test_runner/api-testing/cucumber-expressions.mdx",sourceDirName:"cucumber/test_runner/api-testing",slug:"/cucumber/test_runner/api-testing/cucumber-expressions",permalink:"/autometa/docs/cucumber/test_runner/api-testing/cucumber-expressions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/api-testing/cucumber-expressions.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"cucumberRunnerBar",previous:{title:"DTOs and Builders",permalink:"/autometa/docs/cucumber/test_runner/api-testing/builders"},next:{title:"Phrases & Hiding Implementation Details",permalink:"/autometa/docs/cucumber/test_runner/api-testing/phrases"}},u={},p=[{value:"Cucumber Expressions",id:"cucumber-expressions",level:2}],l={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enhancing-steps-with-cucumber-expressions"},"Enhancing Steps With Cucumber Expressions"),(0,a.kt)("p",null,"In the last section we looked at setting up a builder for our request DTOs. Now we'll look at\nusing cucumber expressions to take instantiation logic away from our step definitions."),(0,a.kt)("h2",{id:"cucumber-expressions"},"Cucumber Expressions"),(0,a.kt)("p",null,"Cucumber expressions are a way of defining a pattern that can be used to match a step definition\nto a step. They are similar to regular expressions, but are more readable and easier to use."),(0,a.kt)("p",null,"For example, the following step:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Cucumber Expressions\n\n  Scenario: Using Cucumber Expressions\n    Given I have a product named 'Foo Phone'\n")),(0,a.kt)("p",null,"We can extract the name using the ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("I have a product named {string}", (name, { world }) => {\n  world.productBuilder = new ProductBuilder().name(name);\n});\n')),(0,a.kt)("p",null,"However we can create a new Cucumber Expression which will create the builder for\nus, and we can just assign it to the world."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/product/product.params.ts\nimport { defineExpression } from "@autometa/runner";\n\n defineExpression({\n  name: "builder:product"\n  regexpPattern: [/\'([^\']*)\'/, /"([^"]*)"/],\n  transform: (name: string) => new ProductBuilder().name(name)\n });\n')),(0,a.kt)("p",null,"This will match any substring that is surrounded by single or double quotes, and\nreturns a ",(0,a.kt)("inlineCode",{parentName:"p"},"ProductBuilder")," instance with the name set."),(0,a.kt)("p",null,"To ensure this expression is loaded, we'll add a glob to our config matching\n",(0,a.kt)("inlineCode",{parentName:"p"},".params.ts")," files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// autometa.config.ts\nimport { defineConfig } from "@autometa/runner";\n\nexport default defineConfig({\n  runner: "jest",\n  roots: {\n    features: ["integration/features"],\n    steps: ["integration/steps"],\n    app: ["src/app.ts"],\n    // vvvvvvvvvv\n    parameterTypes: ["src/**/*.params.ts"]\n  },\n  shim: {\n    errorCauses: true\n  }\n});\n')),(0,a.kt)("p",null,"We also need to update our ",(0,a.kt)("inlineCode",{parentName:"p"},"Types")," interface to recognize the builder\nexpression."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { App as MyApp, World as MyWorld } from "../src/app";\nimport { ProductBuilder } from "../src/product/product.builder";\n\ndeclare module "@autometa/runner" {\n  interface App extends MyApp {}\n  interface World extends MyWorld {}\n  interface Types {\n    "builder:product": ProductBuilder;\n  }\n}\n')),(0,a.kt)("p",null,"We can now easily generate new product builders from steps using expressions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("I have a product named {builder:product}", (builder, { world }) => {\n  world.productBuilder = builder;\n});\n')),(0,a.kt)("p",null,"We can also create an expression to extract the property keys from the Product type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/product/product.params.ts\nimport { defineExpression } from "@autometa/runner";\n\n defineExpression({\n  name: "builder:product"\n  regexpPattern: [/\'([^\']*)\'/, /"([^"]*)"/, /[^\\s]+/],\n  transform: (name: string) => new ProductBuilder().name(name)\n }, {\n  name: "product:property",\n  transform: (value) => value as keyof Product\n });\n')),(0,a.kt)("p",null,"This allows us to match either a whole word without quotation marks, or a quoted string\nwhich represents the property name as multiple words."),(0,a.kt)("p",null,"So where ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," is the property, both of these will match:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},"* `I have a product with name 'Foo Phone'`\n* `I have a product with 'name' 'Foo Phone'`\n")),(0,a.kt)("p",null,"Some properties are multiple words with camelCase, like ",(0,a.kt)("inlineCode",{parentName:"p"},"discountPercentage"),'.\nIt would be nice if we could avoid the "code speak" and use a more natural language\nlike ',(0,a.kt)("inlineCode",{parentName:"p"},"discount percentage"),". We can accomplish that with ",(0,a.kt)("inlineCode",{parentName:"p"},"phrases"),", which we'll discuss in the\nnext section."),(0,a.kt)("p",null,"Before then, lets add a validation to our expression so it can fast-fail the test when given an invalid\ninput from gherkin. You may not want to do this step if you want to be able to test for input with unknown\nproperties."),(0,a.kt)("p",null,"Since interfaces/types don't exist at run time, and a DTO is empty until it is built, we cannot\ncompare our expression value to those. The builder, however, has a method of the same name as\nthe DTO property that is guaranteed to be defined if the DTO was properly decorated with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Property"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/product/product.params.ts\nimport { defineExpression } from "@autometa/runner";\nimport { ProductBuilder } from \'./\'\n\n defineExpression({\n  name: "builder:product"\n  regexpPattern: [/\'([^\']*)\'/, /"([^"]*)"/, /[^\\s]+/],\n  transform: (name: string) => new ProductBuilder().name(name)\n }, {\n  name: "product:property",\n  transform: (value) => {\n    return value as keyof Product\n  }\n });\n')),(0,a.kt)("p",null,"Finally we can update our types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import type { App as MyApp, World as MyWorld } from "../src/app";\nimport type { ProductBuilder, Product } from "../src/product";\n\ndeclare module "@autometa/runner" {\n  interface App extends MyApp {}\n  interface World extends MyWorld {}\n  interface Types {\n    "builder:product": ProductBuilder;\n    "product:property": keyof Product;\n  }\n}\n')),(0,a.kt)("p",null,'We can now use a "Builder Pattern" in our Gherkin steps to reduce the number\nof Step definitions we have defined.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Adding a Product\n\n    Scenario: I add a new product\n        Given I have a product named 'Foo Phone'\n        * I set the product description to 'A phone that is foo'\n        * I set the product price to 100\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { ProductBuilder } from "../../src/products/product.builder";\nimport { Given } from "@autometa/runner";\n\nGiven("I have a product named {string}", (name, { world }) => {\n  world.productBuilder = new ProductBuilder().withName(name);\n});\n\nGiven(\n  "I set the product {builder:property} to {primitive}",\n  (property, value, { world }) => {\n    world.productBuilder = world.productBuilder.assign(property, value);\n    // or\n    world.productBuilder = world.productBuilder[property](value);\n  }\n);\n')),(0,a.kt)("p",null,"Next we'll look at using phrases to make our steps more readable and hide implementation detail."))}d.isMDXComponent=!0}}]);