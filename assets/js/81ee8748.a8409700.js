"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[5709],{4993:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(2983);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),f=o,m=c["".concat(l,".").concat(f)]||c[f]||d[f]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6869:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(3050),o=(n(2983),n(4993));const r={sidebar_position:2},i="Step Definitions",s={unversionedId:"cucumber/test_runner/step_definitions",id:"cucumber/test_runner/step_definitions",title:"Step Definitions",description:"Autometa steps resemble Cucumber JS steps and should be identifiable to",source:"@site/docs/cucumber/test_runner/step_definitions.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/step_definitions",permalink:"/autometa/docs/cucumber/test_runner/step_definitions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/step_definitions.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"cucumberRunnerBar",previous:{title:"Getting started",permalink:"/autometa/docs/cucumber/test_runner/getting_started"},next:{title:"Data Tables",permalink:"/autometa/docs/cucumber/test_runner/datatables"}},l={},p=[{value:"Defining a step",id:"defining-a-step",level:2},{value:"App",id:"app",level:2},{value:"Async",id:"async",level:2},{value:"Tables",id:"tables",level:2},{value:"Jest Cucumber Style",id:"jest-cucumber-style",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"step-definitions"},"Step Definitions"),(0,o.kt)("p",null,"Autometa steps resemble Cucumber JS steps and should be identifiable to\nmost Gherkin IDE plugins."),(0,o.kt)("p",null,"The largest difference is that Autometa step callbacks are not bound\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"World")," object. Instead, ",(0,o.kt)("inlineCode",{parentName:"p"},"World")," is a property of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," object,\nwhich will passed as the last argument to the step callback."),(0,o.kt)("p",null,"Because the step is not bound, it is safe to use fat arrow (",(0,o.kt)("inlineCode",{parentName:"p"},"=>"),") functions."),(0,o.kt)("h2",{id:"defining-a-step"},"Defining a step"),(0,o.kt)("p",null,"Steps can be defined using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Given"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"When"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"Then")," functions. If the gherkin\nfile includes ",(0,o.kt)("inlineCode",{parentName:"p"},"And"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"But")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," steps, they can be matched against any of those main 3.\nIt is advised to define them against the step they follow."),(0,o.kt)("p",null,"I.e for the steps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"Given a foo\nAnd a bar\n")),(0,o.kt)("p",null,"The step ",(0,o.kt)("inlineCode",{parentName:"p"},"And a bar")," should be defined as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Given"),", however this is not enforced."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("a foo", () => {\n  // ...\n});\n\nGiven("a bar", () => {\n  // ...\n});\n')),(0,o.kt)("p",null,"If no matching steps are found, a report will be generated from a fuzzy search,\nhelping to identify typos."),(0,o.kt)("h2",{id:"app"},"App"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," object is passed as the last argument to the step callback. If there are no tables\nor Cucumber Expressions, it will be the only argument. Apps type must be defined by you (see ",(0,o.kt)("a",{parentName:"p",href:"./getting_started"},"Getting Started"),"),\nor else it will be an empty object containing an empty world at the type level."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("a foo", (app) => {\n  app.webdriver.clickFoo();\n});\n')),(0,o.kt)("h2",{id:"async"},"Async"),(0,o.kt)("p",null,"Step callbacks can be synchronous or asynchronous. If you do not want to store\nthe result and define the function as ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," you can simply return the promise\nof the underlying action:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("a foo", (app) => {\n  return app.http.createFoo({ foo: "test-bar" });\n});\n')),(0,o.kt)("p",null,"However if, for example, you want to store the result on the World, you can\nawait the promise and then store the result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given } from "@autometa/runner";\n\nGiven("a foo", async (app) => {\n  const foo = await app.http.createFoo({ foo: "test-bar" });\n  app.world.foo = foo;\n});\n')),(0,o.kt)("h2",{id:"tables"},"Tables"),(0,o.kt)("p",null,"Autometa tables are inspired by the ",(0,o.kt)("a",{parentName:"p",href:"https://www.baeldung.com/cucumber-data-tables"},"Java")," implementation\nwhich allows tables to be parsed differently according to step."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"./datatables"},"Data Tables")," for more information on tables."),(0,o.kt)("p",null,"To use a table in a step, simply append the table type as the last argument to the step definition,\nwhich can be accessed as the first or second to last argument before App in the definition callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"Given a foo\n| foo | bar    | baz   |\n| 1   | true   | bobby |\n")),(0,o.kt)("p",null,"This represents a 'Horizontal Table' or ",(0,o.kt)("inlineCode",{parentName:"p"},"HTable"),", where the first row represents the headers\nand the rest the data. This can be accessed as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Given, HTable } from "@autometa/runner";\n\nGiven(\n  "a foo",\n  (table: HTable, app) => {\n    const fooNum = table.get("foo", 0) as number;\n    const fooBool = table.get("bar", 0) as boolean;\n    const fooStr = table.get("baz", 0) as string;\n    const fooNumString = table.get("foo", 0, true) as string;\n  },\n  HTable\n);\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Datatable values will be converted to their javascript type where possible"),(0,o.kt)("p",{parentName:"admonition"},"i.e strings that represent numbers will be converted to a number, 'true' and 'false'\nwill be treated as bools while the rest will be parsed as strings."),(0,o.kt)("p",{parentName:"admonition"},"The original raw value can be accessed by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," as the third argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"table.get")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const fooNumString = table.get("foo", 0, true) as string;\n'))),(0,o.kt)("h3",{id:"jest-cucumber-style"},"Jest Cucumber Style"),(0,o.kt)("p",null,"It's also possible to use a nested jest-cucumber style to write definitions.\nThese can still access globally defined steps but also feature or scenario specific steps."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Feature, Scenario, ScenarioOutline, Rule Given, HTable } from "@autometa/runner";\n\nFeature("A feature", () => {\n  Given(\'Feature shared step\', ()=>{\n    // ...\n  })\n  Scenario("A scenario", () => {\n    Given("a foo", (app) => {\n      app.world.foo = "foo";\n    });\n\n    Then("the foo should be \'foo\'", (app) => {\n      expect(app.world.foo).toBe("foo");\n    });\n  });\n\n  ScenarioOutline("A scenario outline", () => {\n    Given("a foo with <foo>", (table: HTable, app) => {\n      app.world.foo = table.get("foo", 0) as string;\n    });\n\n    Then("the foo should be <foo>", (table: HTable, app) => {\n      expect(app.world.foo).toBe(table.get("foo", 0) as string);\n    });\n  });\n\n  Rule("A rule", () => {\n    Given("a foo", (app) => {\n      app.world.foo = "foo";\n    });\n\n    Then("the foo should be \'foo\'", (app) => {\n      expect(app.world.foo).toBe("foo");\n    });\n\n    Scenario("A scenario", () => {\n      Given("a foo", (app) => {\n        app.world.foo = "foo";\n      });\n\n      Then("the foo should be \'foo\'", (app) => {\n        expect(app.world.foo).toBe("foo");\n      });\n    });\n  });\n}, \'path/to/feature.feature\');\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"path")," argument at the end of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Feature")," function can be relative, root-relative,\nabsolute, or be relative to a ",(0,o.kt)("inlineCode",{parentName:"p"},"featuresRoot")," based on the following rules:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If the path starts with a slash, it is absolutel"),(0,o.kt)("li",{parentName:"ul"},"If the path starts with ",(0,o.kt)("inlineCode",{parentName:"li"},"./")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"../")," it is relative"),(0,o.kt)("li",{parentName:"ul"},"If the path starts with neither a ",(0,o.kt)("inlineCode",{parentName:"li"},"/")," or ",(0,o.kt)("inlineCode",{parentName:"li"},".")," it is relative to the root of the project"),(0,o.kt)("li",{parentName:"ul"},"If the path starts with ",(0,o.kt)("inlineCode",{parentName:"li"},"~")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"featuresRoot")," is defined in ",(0,o.kt)("inlineCode",{parentName:"li"},"autometa.config.ts"),", it is relative to that root.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Step definitions defined in this style have specificity. I.e. if a step is defined globally and within a feature,\nthe feature specific step will be used. This allows for more granular control over step definitions. Likewise,\nif a step is defined globally, within a feature, and within a scenario, the scenario specific step will be used.")))}d.isMDXComponent=!0}}]);