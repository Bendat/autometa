"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[2541],{7522:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(i,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8560:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(4321),a=(n(9901),n(7522));const o={sidebar_position:1},s="Using Allure",l={unversionedId:"cucumber/test_runner/Allure/enabling_allure",id:"cucumber/test_runner/Allure/enabling_allure",title:"Using Allure",description:"Autometa supports the Allure Reports Framework.",source:"@site/docs/cucumber/test_runner/Allure/enabling_allure.mdx",sourceDirName:"cucumber/test_runner/Allure",slug:"/cucumber/test_runner/Allure/enabling_allure",permalink:"/autometa/docs/cucumber/test_runner/Allure/enabling_allure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/Allure/enabling_allure.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"cucumberRunnerBar",previous:{title:"Tag Filtering",permalink:"/autometa/docs/cucumber/test_runner/tag-filtering"},next:{title:"Referencing Feature files",permalink:"/autometa/docs/cucumber/test_runner/import-strategies"}},i={},u=[{value:"Defining Steps in tests",id:"defining-steps-in-tests",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(c,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-allure"},"Using Allure"),(0,a.kt)("p",null,"Autometa supports the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.qameta.io/allure/"},"Allure Reports Framework"),"."),(0,a.kt)("p",null,"To enable reporting, add ",(0,a.kt)("inlineCode",{parentName:"p"},"AllureSubscriber")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"subscriber")," property in your\n",(0,a.kt)("inlineCode",{parentName:"p"},"autometa.config.ts")," or other file which calls ",(0,a.kt)("inlineCode",{parentName:"p"},"defineConfig()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='autometa.config.ts'",title:"'autometa.config.ts'"},'import { defineConfig, AllureSubscriber } from "@autometa/cucumber-runner";\ndefineConfig({\n  // ....\n  subscribers: [AllureSubscriber]\n  // ...\n});\n')),(0,a.kt)("p",null,"One enabled, Allure will automatically generate suites, packages, tests, hooks and steps,\nwhich will be generated to ",(0,a.kt)("inlineCode",{parentName:"p"},".allure-reports/")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Docusaurus logo",src:n(9912).Z,width:"3018",height:"2002"})),(0,a.kt)("h2",{id:"defining-steps-in-tests"},"Defining Steps in tests"),(0,a.kt)("p",null,"It's possible to define substeps within steps and hooks. To do so,\nadd ",(0,a.kt)("inlineCode",{parentName:"p"},"AllureStepper")," as a constructor argument on your ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Fixture\n@Persistent\nexport class App {\n  constructor(readonly allure: AllureStepper) {}\n}\n")),(0,a.kt)("p",null,"From here it can be accessed from a step or hook defintion function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Given("a user wishes to log in", ({ world, allure: { step } }: App) => {\n  // synchronous allure step\n  step("configure credentials", () => {\n    world.credentials = {\n      username: process.env.USERNAME,\n      password: process.env.PASSWORD\n    };\n  });\n});\n\nWhen(\n  "the user logs in with their credentials",\n  async ({ page, world, allure: { step } }: App) => {\n    // asynchronous allure step\n    await step("Enter username", () => page.enterUsername(world.username));\n    await step("Enter password", () => page.enterUsername(world.password));\n    await step("Click login", page.clickLogin);\n  }\n);\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"An Allure step can be asynchronous or synchronous. If it is asynchronous or returns\na ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),", then the Allure step itself must be ",(0,a.kt)("inlineCode",{parentName:"p"},"await"),"'d.")),(0,a.kt)("p",null,"Allure steps can also be used in some hooks."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { dbSeeder, cleanup } from "../db";\n\nBefore("Setup Db", async ({ world, allure: { step } }: App) => {\n  await step(\n    "Add seed data to database",\n    async () => (world.seedData = await dbSeeder())\n  );\n});\n\nAfter("Teardown db", async ({ world, allure: { step } }: App) => {\n  await step("delete seeded data", () => cleanup(world.seedData));\n});\n')))}d.isMDXComponent=!0},9912:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/allure-7c45b395d758d6ea811fc065720dba41.png"}}]);