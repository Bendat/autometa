"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[5649],{4993:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(2983);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,f=c["".concat(s,".").concat(h)]||c[h]||d[h]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(3050),o=(n(2983),n(4993));const a={sidebar_position:8},i="Hooks",l={unversionedId:"cucumber/test_runner/hooks",id:"cucumber/test_runner/hooks",title:"Hooks",description:"The following hooks are supported:",source:"@site/docs/cucumber/test_runner/hooks.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/hooks",permalink:"/autometa/docs/cucumber/test_runner/hooks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/hooks.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"cucumberRunnerBar",previous:{title:"Date Time",permalink:"/autometa/docs/cucumber/test_runner/datetime"},next:{title:"HTTP Client",permalink:"/autometa/docs/cucumber/test_runner/http-client"}},s={},p=[{value:"Setup",id:"setup",level:2},{value:"Before",id:"before",level:2},{value:"After",id:"after",level:2},{value:"Teardown",id:"teardown",level:2},{value:"Order Of Execution",id:"order-of-execution",level:2},{value:"The order in which the hooks files are loaded.",id:"the-order-in-which-the-hooks-files-are-loaded",level:3},{value:"The order in which the hooks are defined in the file.",id:"the-order-in-which-the-hooks-are-defined-in-the-file",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hooks"},"Hooks"),(0,o.kt)("p",null,"The following hooks are supported:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Before"),(0,o.kt)("li",{parentName:"ul"},"After"),(0,o.kt)("li",{parentName:"ul"},"setup"),(0,o.kt)("li",{parentName:"ul"},"Teardown")),(0,o.kt)("p",null,"Hooks can be defined in files with the following extensions, and should be located under the ",(0,o.kt)("inlineCode",{parentName:"p"},"stepDefinitionsRoot")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.hooks.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.before.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.after.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.setup.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*.teardown.ts"))),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"The setup hook is executed before any tests are run. It is useful for bootstrapping the environment.\nThe setup call back recieves a special copy of the app which is shared between all ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TearDown"),"\ncalls but not tests or other hooks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Setup } from "@autometa/runner";\n\nSetup("Setup the services \'foo\'", (app) => {\n  app.world.foo = 2;\n});\n')),(0,o.kt)("h2",{id:"before"},"Before"),(0,o.kt)("p",null,"The before hook is executed before each test. It is useful for setting up the world in advance\nof a test, setting up data from the service or preparing data base entries."),(0,o.kt)("p",null,"Before recieves the same copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," that the test it preceeds will have."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Before } from "@autometa/runner";\nimport { setupFooObject } from "../objects";\n\nBefore("Setup the services \'foo\'", (app) => {\n  return app.myHttpClient.post("/foo", setupFooObject);\n});\n')),(0,o.kt)("h2",{id:"after"},"After"),(0,o.kt)("p",null,"The after hook is executed after each test. It is useful for cleaning up data from the service\nor database, or resetting the environment to a known state."),(0,o.kt)("p",null,"After recieves the same copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," that the test it succeeds will have."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { After } from "@autometa/runner";\n\nAfter("Reset the services \'foo\'", (app) => {\n  return app.myHttpClient.delete("/foo", app.world.someId);\n});\n')),(0,o.kt)("h2",{id:"teardown"},"Teardown"),(0,o.kt)("p",null,"The teardown hook is executed after all tests have run. It is useful for cleaning up the environment\nafter all tests have run. It shares the same copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," as the ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup")," hook."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Teardown } from "@autometa/runner";\n\nTeardown("Reset the services \'foo\'", (app) => {\n  return app.myHttpClient.delete("/foo?type=testType");\n});\n')),(0,o.kt)("h2",{id:"order-of-execution"},"Order Of Execution"),(0,o.kt)("p",null,"Hooks are executed according to 2 orders:"),(0,o.kt)("h3",{id:"the-order-in-which-the-hooks-files-are-loaded"},"The order in which the hooks files are loaded."),(0,o.kt)("p",null,"Hooks will be loaded in filesystem order. Consider the following directory,\nwhich will be in ",(0,o.kt)("inlineCode",{parentName:"p"},"test/steps"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"  test/steps\n  \u251c\u2500\u2500 common.hooks.ts\n  \u251c\u2500\u2500 cleanup.hooks.ts\n  \u251c\u2500\u2500 products/\n  \u2502   \u251c\u2500\u2500 products.hooks.ts\n")),(0,o.kt)("p",null,"Hooks will be executed in the following file order:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"common.hooks.ts")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"cleanup.hooks.ts")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"products/products.hooks.ts"))),(0,o.kt)("h3",{id:"the-order-in-which-the-hooks-are-defined-in-the-file"},"The order in which the hooks are defined in the file."),(0,o.kt)("p",null,"Hooks will be executed in the order they are defined in the file. Consider the following file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// common.hooks.ts\nimport { Before, After } from "@autometa/runner";\n\nBefore("Setup the services \'foo\'", (app) => {\n  return app.myHttpClient.post("/foo", setupFooObject);\n});\n\nBefore("Setup the services \'bar\'", (app) => {\n  return app.myHttpClient.post("/bar", setupBarObject);\n});\n\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup the services 'foo'")," hook will be executed before the ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup the services 'bar'")," hook.\nSo the first before hook that will be executed is ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup the services 'foo'")," and the second will be ",(0,o.kt)("inlineCode",{parentName:"p"},"Setup the services 'bar"),",\nfollowed by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Before")," hooks in the next file and so on."))}d.isMDXComponent=!0}}]);