"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[4381],{4993:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(2983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=c(n),f=a,d=l["".concat(u,".").concat(f)]||l[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(3050),a=(n(2983),n(4993));const o={sidebar_position:1},i="Configuring Jest",s={unversionedId:"cucumber/test_runner/api-testing/configuring-jest",id:"cucumber/test_runner/api-testing/configuring-jest",title:"Configuring Jest",description:"Once your jest.config has been set up to your liking, we'll need to make some changes",source:"@site/docs/cucumber/test_runner/api-testing/configuring-jest.mdx",sourceDirName:"cucumber/test_runner/api-testing",slug:"/cucumber/test_runner/api-testing/configuring-jest",permalink:"/autometa/docs/cucumber/test_runner/api-testing/configuring-jest",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/api-testing/configuring-jest.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"cucumberRunnerBar",previous:{title:"Setting Up",permalink:"/autometa/docs/cucumber/test_runner/api-testing/setting-up"},next:{title:"Schemas and Types",permalink:"/autometa/docs/cucumber/test_runner/api-testing/schemas-and-interfaces"}},u={},c=[{value:"Add the Cucumber transformer",id:"add-the-cucumber-transformer",level:2},{value:"Setup Files After Env",id:"setup-files-after-env",level:2}],p={toc:c},l="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuring-jest"},"Configuring Jest"),(0,a.kt)("p",null,"Once your ",(0,a.kt)("inlineCode",{parentName:"p"},"jest.config")," has been set up to your liking, we'll need to make some changes\nto support the Cucumber Runner."),(0,a.kt)("h2",{id:"add-the-cucumber-transformer"},"Add the Cucumber transformer"),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"@autometa/jest-transformer")," installed, we can add it as a transform module for ",(0,a.kt)("inlineCode",{parentName:"p"},"*.feature")," files.\nWe can also make ",(0,a.kt)("inlineCode",{parentName:"p"},"*.feature")," a test extension which Jest can load"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// jest.config.ts\ndefault export {\n  transform: {\n    "^.+\\\\.feature$": "@autometa/jest-transformer"\n  },\n  moduleFileExtensions: ["feature", "js", "json", "ts", "tsx"],\n  testRegex: "(/integration/feature/.*|(\\\\.|/)(test|spec))\\\\.feature$"\n};\n')),(0,a.kt)("p",null,"For this example we will hold our tests in ",(0,a.kt)("inlineCode",{parentName:"p"},"integration/feature")," and name them with the ",(0,a.kt)("inlineCode",{parentName:"p"},".feature")," extension."),(0,a.kt)("h2",{id:"setup-files-after-env"},"Setup Files After Env"),(0,a.kt)("p",null,"We need to setup the Cucumber environment before Jest runs. We can do this by adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"setupFilesAfterEnv")," property to our Jest config,\nand reference our ",(0,a.kt)("inlineCode",{parentName:"p"},"autometa.config.ts")," file and ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect-metadata"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// jest.config.ts\nexport default {\n  setupFilesAfterEnv: ["reflect-metadata", "./autometa/config.ts"]\n};\n')))}m.isMDXComponent=!0}}]);