"use strict";(self.webpackChunkautometa=self.webpackChunkautometa||[]).push([[529],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9698:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var i=n(5882),a=n(950),r=(n(9496),n(9613)),o=["components"],s={},l="Assertions",p={unversionedId:"ui-testing/user-behaviors/assertions",id:"ui-testing/user-behaviors/assertions",title:"Assertions",description:"Assertions are functions which take the result of an Observation and",source:"@site/docs/2_ui-testing/2_user-behaviors/5_assertions.md",sourceDirName:"2_ui-testing/2_user-behaviors",slug:"/ui-testing/user-behaviors/assertions",permalink:"/autometa/docs/ui-testing/user-behaviors/assertions",editUrl:"https://github.com/Bendat/autometa/docs/2_ui-testing/2_user-behaviors/5_assertions.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Participants & Focus Groups",permalink:"/autometa/docs/ui-testing/user-behaviors/participants and focus groups"},next:{title:"Writing Tests",permalink:"/autometa/docs/ui-testing/user-behaviors/tests"}},c=[{value:"Default Assertions",id:"default-assertions",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"assertions"},"Assertions"),(0,r.kt)("p",null,"Assertions are functions which take the result of an ",(0,r.kt)("inlineCode",{parentName:"p"},"Observation")," and\nthrow an error if a condition is not met."),(0,r.kt)("p",null,"Take for example the ",(0,r.kt)("inlineCode",{parentName:"p"},"Is")," assertion, which throws an error if the value\nextracted by an observer is not the same (type and value) as the provided\nexpected value."),(0,r.kt)("p",null,"For example take a ",(0,r.kt)("inlineCode",{parentName:"p"},"ProfilePage")," with a text element ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),".\nWe can create an observation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const ProfilePageTitle = Observe(ProfilePage, ({ title: { text } }) => text);\n")),(0,r.kt)("p",null,"Which extracts the text of the element on the webpage."),(0,r.kt)("p",null,"It can be tested with ",(0,r.kt)("inlineCode",{parentName:"p"},"Is")," in a test with the ",(0,r.kt)("inlineCode",{parentName:"p"},"see")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Johnny.will.see(ProfilePageTitle, Is('Hi Johnny!'));\n")),(0,r.kt)("p",null,"To create a new assertion, simply define a function which accepts an expected value, and which returns another function (preferably with the same name) which\naccepts a value from the observer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='Provided Assertions'",title:"'Provided","Assertions'":!0},"export function Is<T>(expected: T): AssertionFn {\n  return async function Is<K>(comparedTo: K | T) {\n    expect(await comparedTo).toBe(expected);\n  };\n}\n\n// Elements on the WebPage are typically strings, so this\n// assertion will attempt to cast them to numbers and\n// fail if that is not possible\nexport function IsNumber(expected?: number): AssertionFn {\n  return async function IsNumber(\n    comparedTo: number | string | Promise<number | string>\n  ) {\n    const parsed = Number(await comparedTo);\n    expect(parsed).not.toBeNaN();\n    if (expected) {\n      expect(parsed).toEqual(expected);\n    }\n  };\n}\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Most assertions use Jest assertions under the hood."))),(0,r.kt)("h2",{id:"default-assertions"},"Default Assertions"),(0,r.kt)("p",null,"The following assertions are provided by default:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Is(expected: T)")," - Deep equals between two objects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Equals(expected: T)")," - Identity equals between two objects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IsNumber(expected?: number)")," - Checks a element text is numeric, and equal to the expected value: '1' == 1 and 1 === 1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IsApproximately(expected: number, precision: number)")," - Checks an element text is numeric and approximately equal to the expected value within some precision (2.001 is approximately 2 with a precision of 0.0.1)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IsGreaterThan(expected: number)")," - Checks an element text is numeric and greater than the expected value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HasTitle(title: string, within: ThoughtFor = Within(2, Seconds))")," - Checks the loaded window has the expected title, waiting the provided time (default 2 seconds) before it fails. Equivalent to Selenium's ",(0,r.kt)("inlineCode",{parentName:"li"},".waitForTitleIs()"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TitleContains(title: string, within: ThoughtFor = Within(2, Seconds))")," - Checks the loaded window title contains the expected text - equivalent to Selenium's ",(0,r.kt)("inlineCode",{parentName:"li"},".waitForTitleContains")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TitleMatches(title: Regexp, within: ThoughtFor = Within(2, Seconds))")," - Checks the loaded window title matches (with Regular Expressions) the expected text - equivalent to Selenium's ",(0,r.kt)("inlineCode",{parentName:"li"},".waitForTitleMatches")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HasUrl(url: string | URL, within: ThoughtFor = Within(2, Seconds))")," - Checks the loaded window has the expected title, waiting the provided time (default 2 seconds) before it fails. Equivalent to Selenium's ",(0,r.kt)("inlineCode",{parentName:"li"},".waitForUrlIs()"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UrlContains(url: string, within: ThoughtFor = Within(2, Seconds))")," - Checks the loaded window URL contains the expected text - equivalent to Selenium's ",(0,r.kt)("inlineCode",{parentName:"li"},".waitForURLContains")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UrlMatches(url: Regexp, within: ThoughtFor = Within(2, Seconds))")," - Checks the loaded window URL matches (with Regular Expressions) the expected text - equivalent to Selenium's ",(0,r.kt)("inlineCode",{parentName:"li"},".waitForUrlMatches"))))}d.isMDXComponent=!0}}]);