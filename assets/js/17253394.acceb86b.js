"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[2337],{7522:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1764:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(4321),a=(n(9901),n(7522));const o={sidebar_position:5},i="App & World",p={unversionedId:"cucumber/test_runner/app",id:"cucumber/test_runner/app",title:"App & World",description:"This library uses TSyringe to support",source:"@site/docs/cucumber/test_runner/app.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/app",permalink:"/autometa/docs/cucumber/test_runner/app",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/app.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"cucumberRunnerBar",previous:{title:"Data Tables",permalink:"/autometa/docs/cucumber/test_runner/datatables"},next:{title:"Fixtures",permalink:"/autometa/docs/cucumber/test_runner/fixtures"}},s={},l=[{value:"World",id:"world",level:2},{value:"Attaching World to App",id:"attaching-world-to-app",level:2}],u={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"app--world"},"App & World"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This library uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsyringe"},"TSyringe")," to support\ndependency injection. You will need a reflect pollyfill like ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/reflect-metadata"},"reflect-metadata"),"\nto use the ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," functionality. ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect-metadata")," must be imported early\nin your project and ideally only once. A good place to import it is\nthe very first line of ",(0,a.kt)("inlineCode",{parentName:"p"},"autometa.config.ts")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='autometa.config.ts'",title:"'autometa.config.ts'"},"import 'reflect-metadata'\n...\n\n"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," fixture is undefined by default. It must be created by\nyou in your project, and configured with ",(0,a.kt)("inlineCode",{parentName:"p"},"defineConfig"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"App"),"\nmust be class. It must be decorated with ",(0,a.kt)("inlineCode",{parentName:"p"},"Fixture")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Persistent"),"\ndecorators."),(0,a.kt)("p",null,"Once configured, the app will be instantiated with a new context\nfor every scenario run. It contains user defined data and will\nbe passed to every step callback when executed. It will always be\nthe last argument passed to the callback. If there are no variables,\ndocstrings or data tables it will be the only argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='src/my-app.ts'",title:"'src/my-app.ts'"},'import { Fixture, Persistent } from "@autometa/cucumber-runner";\n\n@Fixture\n@Persistent\nexport class MyApp {}\n')),(0,a.kt)("p",null,"The app must be defined in config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='autometa.config.ts'",title:"'autometa.config.ts'"},'import { defineConfig } from "@autometa/cucumber-runner";\nimport { MyApp } from\ndefineConfig({\n    app: MyApp\n    ...\n})\n')),(0,a.kt)("p",null,"Now the app will be available in all step definition callbacks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='globals/given.steps.ts'",title:"'globals/given.steps.ts'"},'import { Given } from "@autometa/cucumber-runner";\nimport { MyApp } from "../src";\n\nGiven("a step", (app: MyApp) => {\n  expect(app).toBeInstanceOf(MyApp); // pass\n});\n')),(0,a.kt)("h2",{id:"world"},"World"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," has been defined but it's seemingly useless. It would be nice\nto store data between our steps if there is state that must be shared. We\ncould do that on the ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," itself, but Cucumber already has a concept\nfor storing arbitrary data: the implicit ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cucumber/cucumber-js/blob/main/docs/support_files/world.md"},"World"),"."),(0,a.kt)("p",null,"In Cucumber, step definition callbacks are bound to the World. To access it, then,\none must use the ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," keyword, which necessitates the use of ",(0,a.kt)("inlineCode",{parentName:"p"},"function"),"\nsyntax functions, as ",(0,a.kt)("inlineCode",{parentName:"p"},"(fat) => arrow")," functions cannot access the world."),(0,a.kt)("p",null,"In Autometa, the World is explicit. To create your own world, define a class\nwith an index signature so that properties can be arbtirarily defined\nand read."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class World {\n  [key: string]: unknown;\n}\n")),(0,a.kt)("p",null,"This makes all properties of World unknown, forcing proper type\nhandling in tests."),(0,a.kt)("p",null,"However it would be nice to see what properties we ",(0,a.kt)("em",{parentName:"p"},"expect")," tests\nto want to touch. We can do that using the declare keyword:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Fixture, Persistent } from "@autometa/cucumber-runner";\n@Fixture\n@Persistent\nexport class World {\n  [key: string]: unknown;\n\n  declare myRequest: Request<MyDto>;\n  declare userCount: number;\n}\n')),(0,a.kt)("p",null,"This lets tests know that these properties exist and what they look\nlike. At this point the properties do not exist, but they can be written\nto in ",(0,a.kt)("inlineCode",{parentName:"p"},"Given")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"When")," steps and accessed from ",(0,a.kt)("inlineCode",{parentName:"p"},"Then")," steps (for example)."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"@Persistent")," lets Autometa know that the same copy of this object\nshould always be passed to all dependents per scenario, rather than\ncreate a new instance for each consumer."),(0,a.kt)("p",{parentName:"admonition"},"As ",(0,a.kt)("inlineCode",{parentName:"p"},"World")," is intended to store test-persistent data, it should be\n",(0,a.kt)("inlineCode",{parentName:"p"},"Persistent"),".")),(0,a.kt)("h2",{id:"attaching-world-to-app"},"Attaching World to App"),(0,a.kt)("p",null,"Finally, we want to let our App know about World so it becomes\navailable in tests."),(0,a.kt)("p",null,"Simply define it as a public (or readonly( constructor parameter on App."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='src/my-app.ts'",title:"'src/my-app.ts'"},'import { Fixture, Persistent } from "@autometa/cucumber-runner";\n\n@Fixture\n@Persistent\nexport class MyApp {\n  constructor(readonly world: World) {}\n}\n')),(0,a.kt)("p",null,"And that's it. MyApp and World are now available in tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Given("a setup step", ({ world }: App) => {\n  world.myRequest = {\n    /* request json */\n  };\n});\n\nWhen("an action step", async ({ world }: App) => {\n  world.userCount = await fetch({\n    body: world.myRequest\n  });\n});\n\nThen("a validation step", ({ world }: App) => {\n  expect(world.userCount).toEqual(3);\n});\n')))}d.isMDXComponent=!0}}]);