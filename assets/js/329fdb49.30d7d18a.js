"use strict";(self.webpackChunkautometa=self.webpackChunkautometa||[]).push([[440],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1685:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var r=n(5882),o=n(950),a=(n(9496),n(9613)),i=["components"],s={},l="Autometa",p={unversionedId:"intro",id:"intro",title:"Autometa",description:"Autometa is intended to be an automation framework toolkit, which provides libraries to help automate the automation process on node, by providing libraries to help bootstrap an automation framework",source:"@site/docs/0_intro.md",sourceDirName:".",slug:"/intro",permalink:"/autometa/docs/intro",editUrl:"https://github.com/Bendat/autometa/docs/0_intro.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Introduction",permalink:"/autometa/docs/bdd/cucumber/intro"}},u=[{value:"BDD",id:"bdd",children:[{value:"Cucumber Runner",id:"cucumber-runner",children:[],level:3}],level:2},{value:"UI Automation",id:"ui-automation",children:[{value:"Page Component Model - Selenium",id:"page-component-model---selenium",children:[],level:3},{value:"User Behaviors",id:"user-behaviors",children:[],level:3}],level:2},{value:"Utility Libraries",id:"utility-libraries",children:[{value:"DTO &amp; Builder Pattern",id:"dto--builder-pattern",children:[],level:3},{value:"Logger Groups",id:"logger-groups",children:[],level:3}],level:2}],c={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"autometa"},"Autometa"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Autometa")," is intended to be an automation framework toolkit, which provides libraries to help automate the automation process on node, by providing libraries to help bootstrap an automation framework\nsuited to your own product. This is not an automation framework of itself."),(0,a.kt)("p",null,"Below is a summary of Autometa Libraries"),(0,a.kt)("h2",{id:"bdd"},"BDD"),(0,a.kt)("h3",{id:"cucumber-runner"},"Cucumber Runner"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"bdd/cucumber/intro"},"Autometa Cucumber")," is a Cucumber test runner inspired by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bencompton/jest-cucumber"},"jest-cucumber"),".\nIt is a structured cucumber implementation that runs tests in callbacks similar to a Jest or Mocha ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," spec test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=Example",title:"Example"},"Feature(({ Scenario }) => {\n  Scenario('My Scenario', ({ Given, When, Then }) => {\n    Given('my given step', () => console.log('given step executed'));\n    When('my when step', () => console.log('when step executed'));\n    Then('my then step', () => console.log('then step executed'));\n  });\n});\n")),(0,a.kt)("p",null,"Support for more global, dynamic step/feature definitions similar to default Cucumber or ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/timjroberts/cucumber-js-tsflow"},"cucumber-tsflow")," is planned."),(0,a.kt)("p",null,"Currently depends on Jest, with goals to be test runner agnostic."),(0,a.kt)("h2",{id:"ui-automation"},"UI Automation"),(0,a.kt)("h3",{id:"page-component-model---selenium"},"Page Component Model - Selenium"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"./ui-testing/page-component-model/intro"},"Page Component Model")," is a ",(0,a.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/test_practices/encouraged/page_object_models/"},"Page Object Model")," library\nthat aims to simplify creating page objects by introducing the concept of components, in alignment with popular front end framework concepts."),(0,a.kt)("p",null,"The Page Component Model library allows page objects to be written declaratively, with minimal logic and zero instantiation. WebElements\nare automatically picked and loaded based on statically defined information and reflection metadata. They are lazy (connect to selenium only when requested) and scoped (Components will always be located under their parent Components underlying WebElement, only using the WebDriver if the parent is a Page)"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Implementations for other drivers, like PlayWright and Cypress is planned")),(0,a.kt)("h3",{id:"user-behaviors"},"User Behaviors"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"./ui-testing/user-behaviors/intro"},"User Behaviors")," are an abstraction layer on top of\nPage Component which focus on how a user interacts with a Website, compared to Page Components which\ndescribe how a Website is structured."),(0,a.kt)("p",null,"User Behaviors allow declarative interaction with a Website and use easy to read chains\nof actions to complete."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const LoginComponent = Observe(HomePage, ({ loginModal }) => loginModal);\n\nexport const LogInAs = ({ username, password }: Credentials) =>\n  ActionOn(\n    LoginComponent,\n    async ({ usernameField, passwordField, loginButton }) => {\n      await usernameField.write(username);\n      await passwordField.write(password);\n      await loginButton.click();\n    }\n  );\n\n// Example Credentials Store somewhere in your project\nexport const credentials = {\n  Johnny: { username: 'johnnym2', password: '*******' },\n};\n\n@Browser(new Builder().forBrowser(Browser.CHROME))\nexport class Users {\n  @Role('Customer') // Use roles that are relevant to your product\n  @Browses(process.env.MY_URL)\n  Johnny: User;\n}\n\ndescribe('Johnny Logs In', () => {\n  let Johnny: Participant;\n  // instantiate a new community for each test, Johnny will load a driver\n  beforeEach(() => ({ Johnny } = FocusGroup.begin(Users)));\n  // Exit the driver\n\n  it('Johnny Should Successfully Log In as a Standard User', async () => {\n    await Johnny.will(LoginAs(credentials.Johnny)).and.see(\n      HomePage,\n      HasTitle('Welcome, Johnny!')\n    );\n  });\n});\n")),(0,a.kt)("h2",{id:"utility-libraries"},"Utility Libraries"),(0,a.kt)("h3",{id:"dto--builder-pattern"},"DTO & Builder Pattern"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Data_transfer_object"},(0,a.kt)("strong",{parentName:"a"},"D"),"ata ",(0,a.kt)("strong",{parentName:"a"},"T"),"ransfer ",(0,a.kt)("strong",{parentName:"a"},"O"),"bjects")," are simple classes with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@property")," decorator on properties. They can easily be validated with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/typestack/class-validator"},"class-validators"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Builder_pattern"},"Builder Pattern")," is a chainable proxy object for a DTO with setter-methods and a",(0,a.kt)("inlineCode",{parentName:"p"},"build")," method. This library can automatically generate a corresponding builder class for a valid DTO."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=Example",title:"Example"},"import {property, Builder} from '@autometa/dto-builder`\n\nclass MyDTO {\n    @property\n    username: string\n\n    @property\n    password: string\n}\n\nconst MyDTOBuilder = Builder(MyDTO)\n\nconst myBuilderInstance = new MyDTOBuilder();\n\nconst dto = myBuilderInstance.username('bob').password('123456').build()\n\nmyHttpClient.post('/my-route', dto)\n")),(0,a.kt)("h3",{id:"logger-groups"},"Logger Groups"),(0,a.kt)("p",null,"Provides behavior similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"console.group")," on the browser, in Node.\nCan be accessed through either ",(0,a.kt)("inlineCode",{parentName:"p"},"GroupLogger")," or by overriding the ",(0,a.kt)("inlineCode",{parentName:"p"},"console"),"."),(0,a.kt)("p",null,"Not suitable for concurrent tests or asynchronous actions (groups may ",(0,a.kt)("em",{parentName:"p"},"contain")," asynchronous actions)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:"title='Example Log'",title:"'Example","Log'":!0},"Feature: Some Feature\n    Scenario: Some Scenario\n        Given some given step\n            [Log]\n            some user generated log\n            /path/to/log:8:40\n        When some when step\n            [Info]\n            http client recieved response: {message: 'howdy'}\n            /path/to/log:11:9\n\n")))}m.isMDXComponent=!0}}]);