"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[2559],{4993:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(3050),a=(n(2983),n(4993));const s={sidebar_position:9},o="HTTP Client",i={unversionedId:"cucumber/test_runner/http-client",id:"cucumber/test_runner/http-client",title:"HTTP Client",description:"One of the included fixtures provided is the HTTP client. Unlike most",source:"@site/docs/cucumber/test_runner/http-client.mdx",sourceDirName:"cucumber/test_runner",slug:"/cucumber/test_runner/http-client",permalink:"/autometa/docs/cucumber/test_runner/http-client",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner/http-client.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"cucumberRunnerBar",previous:{title:"Hooks",permalink:"/autometa/docs/cucumber/test_runner/hooks"},next:{title:"File Object Proxies",permalink:"/autometa/docs/cucumber/test_runner/file-proxies"}},l={},p=[{value:"Hooks",id:"hooks",level:2},{value:"Schemas",id:"schemas",level:2},{value:"Schema Validation",id:"schema-validation",level:3},{value:"Default Schemas",id:"default-schemas",level:3},{value:"Decomposed Responses",id:"decomposed-responses",level:2},{value:"Additional options",id:"additional-options",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"http-client"},"HTTP Client"),(0,a.kt)("p",null,"One of the included fixtures provided is the ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTP"),' client. Unlike most\nfixtures which are which behave like singletons within the context of\na Scenario, the HTTP client is "transient", and each time it is injected\na new copy is created.'),(0,a.kt)("p",null,"It is accessed as a normal fixture, by defining it as a constructor\nparameter for whatever fixture or App is consuming it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Fixture\n@Constructor(HTTP)\nexport class MyClient {\n  constructor(private http: HTTP) {}\n}\n")),(0,a.kt)("p",null,"The client is unusual in that it behaves as a 2-part builder patten. Certain information,\nsuch as the API URL, routes or common headers can be stored statefully within the client itself"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@Fixture\n@Constructor(HTTP)\nexport class MyClient {\n  constructor(private http: Http) {\n    this.http\n      .url("https://api.example.com")\n      .sharedRoute("v2")\n      .sharedHeader("x-example", "true");\n  }\n}\n')),(0,a.kt)("p",null,"However when a non shared header or route is set, it creates a new client with a new\nrequest context, which will inherit values set in the original client, but\nmodifcations happen in this new contex and do not mutate the shared client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@Fixture\n@Constructor(HTTP)\nexport class MyClient {\n  constructor(private http: Http) {\n    this.http\n      .url("https://api.example.com")\n      .sharedRoute("v2")\n      .sharedHeader("x-example", "true");\n  }\n\n  getProduct(id: number) {\n    return this.http.route("products").route(id).get();\n  }\n\n  getProducts(limit?: number) {\n    return (\n      this.http\n        .route("products") // creates a new client with the route set to /v2/products\n        // resolves to /v2/products?limit=10\n        .param("limit", limit) // creates a new client with the param set to 10\n        .get() // makes the request and returns the response using all data set thus far\n    );\n  }\n}\n')),(0,a.kt)("h2",{id:"hooks"},"Hooks"),(0,a.kt)("p",null,"The http client has two hooks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onSend")," which is triggered when the request has been constructed but no request has been made."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onRecieve")," which executes after the response has been received, if axios did not throw an error.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onBeforeSend")," receieves a copy of the current request immediately before it is sent. It can be used\nto log the request, or run assertions against it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export type HTTPRequest<T> = {\n  url: string;\n  method: Method;\n  params?: Record<string, string>;\n  fullUrl: string;\n  headers: Record<string, string>;\n  data?: T;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fullUrl")," is the full resolved url of the request including parameters and routes, i.e.\n",(0,a.kt)("inlineCode",{parentName:"p"},"https://api.example.com/v2/products/1?limit=10")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onRecievedResponse")," receives the response object, and the request state. It can be used to\nrun assertions against a response or again for logging."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class HTTPResponse<T> {\n  status: number;\n  statusText: string;\n  data: T;\n  headers: Record<string, string>;\n  request: {\n    url: string;\n    method: Method;\n  };\n}\n")),(0,a.kt)("h2",{id:"schemas"},"Schemas"),(0,a.kt)("p",null,"Schemas are function or validator objects which are mapped to a response status code.\nA Schema validates the data payload of the response, and throws an error if the response does\nnot match the required shape or other validation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { z } from "zod";\nconst ResponseSchema = z.object({\n  id: z.number(),\n  name: z.string()\n});\n\n@Fixture\nexport class MyClient {\n  constructor(private http: Http) {\n    this.http\n      .url("https://api.example.com")\n      .sharedRoute("v2")\n      .sharedOnBeforeHook(this.logRequest)\n      .sharedOnRecievedResponseHook(this.logResponse);\n  }\n\n  logRequest({ method, url }: RequestState) {\n    console.log(`making ${method} request to ${url}`);\n  }\n\n  logResponse(response: HTTPResponse<unknown>) {\n    console.log(`recieved ${response.status} response from ${method} ${url}`);\n  }\n}\n')),(0,a.kt)("h3",{id:"schema-validation"},"Schema Validation"),(0,a.kt)("p",null,"The client accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"schema")," map, which is a mapping of a schema parsing object to a HTTP status code\nor list of status codes. A schema is registered as an object with a ",(0,a.kt)("inlineCode",{parentName:"p"},"parse")," method, which accepts the\nresponse data and returns a parsed object, or throws an error."),(0,a.kt)("p",null,"Example using ",(0,a.kt)("inlineCode",{parentName:"p"},"zod"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { z } from "zod";\nconst ResponseSchema = z.object({\n  id: z.number(),\n  name: z.string()\n});\n\n@Fixture\nexport class MyClient {\n  constructor(private http: Http) {\n    this.http\n      .url("https://api.example.com")\n      .sharedRoute("v2")\n      .sharedHeader("x-example", "true");\n  }\n\n  getProduct(id: number) {\n    return (\n      this.http\n        .route("products")\n        // single value\n        .schema(ResponseSchema, 200)\n        // list\n        .schema(ResponseSchema, 200, 201, 204)\n        // range\n        .schema(ResponseSchema, { from: 200, to: 204 })\n        .route(id)\n        .get()\n    );\n  }\n}\n')),(0,a.kt)("h3",{id:"default-schemas"},"Default Schemas"),(0,a.kt)("p",null,"A number of default schemas are provided for cases where the response\nis not JSON, or the response is empty."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AnySchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts any response and returns it as is"))),(0,a.kt)("li",{parentName:"ul"},"EmptySchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," or the string 'null' and returns ",(0,a.kt)("inlineCode",{parentName:"li"},"null")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),"."))),(0,a.kt)("li",{parentName:"ul"},"NullSchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts ",(0,a.kt)("inlineCode",{parentName:"li"},"null")," or the string 'null' and returns ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),"."))),(0,a.kt)("li",{parentName:"ul"},"UndefinedSchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," and returns ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),"."))),(0,a.kt)("li",{parentName:"ul"},"BooleanSchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," or the strings 'true' or 'false' and returns a boolean of the same value."))),(0,a.kt)("li",{parentName:"ul"},"NumberSchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts any number or string which can be parsed as a number and returns a number."))),(0,a.kt)("li",{parentName:"ul"},"StringSchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts any string and returns it as is."))),(0,a.kt)("li",{parentName:"ul"},"JSONSchema",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Accepts any JSON string and returns the parsed JSON object, or accepts a JSON objet and returns it\nas is.")))),(0,a.kt)("h2",{id:"decomposed-responses"},"Decomposed Responses"),(0,a.kt)("p",null,"Responses can be 'decomposed' from other responses. With this, the status, and header\ninformation remains the same but a new response object is produced, using a value\ntaken from the original response as it's data."),(0,a.kt)("p",null,"Imagine you have steps to validate a product stored in the world:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Then, AssertKey } from "@autometa/runner";\n// Then the product name is \'bob\'\n// Then the product price is 10\nThen("the product {string} is {primitive}", (key, value, { world }) => {\n  AssertKey(world.myProduct, key);\n  const product = world.myProduct;\n  expect(product[key]).toEqual(value);\n});\n')),(0,a.kt)("p",null,"And later you're implementing the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," endpoint which gets all products\nas an object with a paginated list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    products: Product[];\n    pagination: {\n        total: number;\n        limit: number;\n        offset: number;\n    }\n}\n")),(0,a.kt)("p",null,"It would be nice to easily reuse our existing steps to validate the product, by making\na new step to add it as ",(0,a.kt)("inlineCode",{parentName:"p"},"myProduct"),", which is a ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTPResponse<Produxt>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Then("I examine product {int}", (index, { world }) => {\n  const response = world.productsResponse;\n  //   const data = response.data.products[index];\n  world.myProduct = HTTPResponse.decompose<Product>(\n    response,\n    (products) => products[index]\n  ); // now HTTPResponse<Product>\n});\n')),(0,a.kt)("p",null,"Which lets you reuse your existing step."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gherkin"},"Scenario: some scenario\n    ...\n    ...\n    Then I examine product 1\n    * the product name is 'bob'\n    * the product price is 10\n    And I examine product 2\n    * the product name is 'alice'\n    * the product price is 20\n")),(0,a.kt)("h2",{id:"additional-options"},"Additional options"),(0,a.kt)("p",null,"Your underlying HTTPClient implementation might not handle Certain\nthings the way you want, like how it parses param queries."),(0,a.kt)("p",null,"We can set additional options on the client to change this behaviour.\nAs the default client uses Axios, we can set the ",(0,a.kt)("inlineCode",{parentName:"p"},"paramsSerializer")," option using\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"qs")," query string library"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// utils.ts\nimport qs from "qs";\nexport const AxiosSerializer: AxiosRequestConfig = {\n  paramsSerializer: (params) => {\n    return qs.stringify(params, { arrayFormat: "comma" });\n  },\n};\n\n// my-client.ts\n\n@Fixture\nexport class MyClient {\n  constructor(private http: Http) {\n    this.http\n      .url("https://api.example.com")\n      .sharedRoute("v2")\n      .sharedHeader("x-example", "true")\n      .sharedOptions(AxiosSerializer);\n  }\n}\n')))}d.isMDXComponent=!0}}]);