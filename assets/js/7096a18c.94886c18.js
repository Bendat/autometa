"use strict";(self.webpackChunk_autometa_documentation=self.webpackChunk_autometa_documentation||[]).push([[7162],{4993:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(2983);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(r),d=a,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8364:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(3050),a=(r(2983),r(4993));const o={sidebar_position:6},i="Test Scopes",s={unversionedId:"cucumber/test_runner_legacy/test-groups",id:"cucumber/test_runner_legacy/test-groups",title:"Test Scopes",description:"While Autometa can be run entirely with Global steps, it may be desireable",source:"@site/docs/cucumber/test_runner_legacy/test-groups.md",sourceDirName:"cucumber/test_runner_legacy",slug:"/cucumber/test_runner_legacy/test-groups",permalink:"/autometa/docs/cucumber/test_runner_legacy/test-groups",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cucumber/test_runner_legacy/test-groups.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"cucumberRunnerBarLegacy",previous:{title:"Hooks",permalink:"/autometa/docs/cucumber/test_runner_legacy/hooks"},next:{title:"Tag Filtering",permalink:"/autometa/docs/cucumber/test_runner_legacy/tag-filtering"}},c={},u=[],l={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"test-scopes"},"Test Scopes"),(0,a.kt)("p",null,"While Autometa can be run entirely with Global steps, it may be desireable\nto provide specific implementations for some scenarios. For example, step texts\nthat have high potential for conflict due to same text but different intended\nbehavior, or scenarios which have edge cases for the same text."),(0,a.kt)("p",null,"The available groups are ",(0,a.kt)("inlineCode",{parentName:"p"},"Feature"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Rule")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ScenarioOutline")," with the test type being ",(0,a.kt)("inlineCode",{parentName:"p"},"Scenario"),"."),(0,a.kt)("p",null,"By default, Autometa will assemble all rules, scenarios and outlines from\nglobal steps, but they can be explicitely overwritten. When overwritten, not\nevery step in that group needs to be defined. If there are 5 steps, and 4 are valid global steps, then only one step need be defined in the test group."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Feature,\n  Rule,\n  ScenarioOutline,\n  Scenario,\n  Pass,\n} from "@autometa/cucumber-runner";\n\nFeature(() => {\n  Scenario("override this scenario", () => {\n    Given("override this specific step", Pass);\n  });\n  Rule("override this rule", () => {\n    ScenarioOutline("override this scenarioOutline", () => {\n      Given("a step unique to this outline", Pass);\n    });\n  });\n}, "./my-feature.ts");\n')))}m.isMDXComponent=!0}}]);